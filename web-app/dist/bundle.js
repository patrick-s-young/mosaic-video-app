!function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(r,i,function(t){return e[t]}.bind(null,i));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=54)}([function(e,t,n){"use strict";e.exports=n(21)},function(e,t,n){"use strict";var r=n(10),i=Object.prototype.toString;function o(e){return"[object Array]"===i.call(e)}function a(e){return void 0===e}function u(e){return null!==e&&"object"==typeof e}function l(e){if("[object Object]"!==i.call(e))return!1;var t=Object.getPrototypeOf(e);return null===t||t===Object.prototype}function c(e){return"[object Function]"===i.call(e)}function s(e,t){if(null!=e)if("object"!=typeof e&&(e=[e]),o(e))for(var n=0,r=e.length;n<r;n++)t.call(null,e[n],n,e);else for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&t.call(null,e[i],i,e)}e.exports={isArray:o,isArrayBuffer:function(e){return"[object ArrayBuffer]"===i.call(e)},isBuffer:function(e){return null!==e&&!a(e)&&null!==e.constructor&&!a(e.constructor)&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)},isFormData:function(e){return"undefined"!=typeof FormData&&e instanceof FormData},isArrayBufferView:function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&e.buffer instanceof ArrayBuffer},isString:function(e){return"string"==typeof e},isNumber:function(e){return"number"==typeof e},isObject:u,isPlainObject:l,isUndefined:a,isDate:function(e){return"[object Date]"===i.call(e)},isFile:function(e){return"[object File]"===i.call(e)},isBlob:function(e){return"[object Blob]"===i.call(e)},isFunction:c,isStream:function(e){return u(e)&&c(e.pipe)},isURLSearchParams:function(e){return"undefined"!=typeof URLSearchParams&&e instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product&&"NativeScript"!==navigator.product&&"NS"!==navigator.product)&&("undefined"!=typeof window&&"undefined"!=typeof document)},forEach:s,merge:function e(){var t={};function n(n,r){l(t[r])&&l(n)?t[r]=e(t[r],n):l(n)?t[r]=e({},n):o(n)?t[r]=n.slice():t[r]=n}for(var r=0,i=arguments.length;r<i;r++)s(arguments[r],n);return t},extend:function(e,t,n){return s(t,(function(t,i){e[i]=n&&"function"==typeof t?r(t,n):t})),e},trim:function(e){return e.replace(/^\s*/,"").replace(/\s*$/,"")},stripBOM:function(e){return 65279===e.charCodeAt(0)&&(e=e.slice(1)),e}}},function(e,t,n){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=function(e,t){var n=e[1]||"",r=e[3];if(!r)return n;if(t&&"function"==typeof btoa){var i=(a=r,u=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),l="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(u),"/*# ".concat(l," */")),o=r.sources.map((function(e){return"/*# sourceURL=".concat(r.sourceRoot||"").concat(e," */")}));return[n].concat(o).concat([i]).join("\n")}var a,u,l;return[n].join("\n")}(t,e);return t[2]?"@media ".concat(t[2]," {").concat(n,"}"):n})).join("")},t.i=function(e,n,r){"string"==typeof e&&(e=[[null,e,""]]);var i={};if(r)for(var o=0;o<this.length;o++){var a=this[o][0];null!=a&&(i[a]=!0)}for(var u=0;u<e.length;u++){var l=[].concat(e[u]);r&&i[l[0]]||(n&&(l[2]?l[2]="".concat(n," and ").concat(l[2]):l[2]=n),t.push(l))}},t}},function(e,t,n){"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE){0;try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}}(),e.exports=n(22)},function(e,t,n){var r=n(5),i=n(50);"string"==typeof(i=i.__esModule?i.default:i)&&(i=[[e.i,i,""]]);var o={insert:"head",singleton:!1};r(i,o);e.exports=i.locals||{}},function(e,t,n){"use strict";var r,i=function(){return void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r},o=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),a=[];function u(e){for(var t=-1,n=0;n<a.length;n++)if(a[n].identifier===e){t=n;break}return t}function l(e,t){for(var n={},r=[],i=0;i<e.length;i++){var o=e[i],l=t.base?o[0]+t.base:o[0],c=n[l]||0,s="".concat(l," ").concat(c);n[l]=c+1;var f=u(s),d={css:o[1],media:o[2],sourceMap:o[3]};-1!==f?(a[f].references++,a[f].updater(d)):a.push({identifier:s,updater:v(d,t),references:1}),r.push(s)}return r}function c(e){var t=document.createElement("style"),r=e.attributes||{};if(void 0===r.nonce){var i=n.nc;i&&(r.nonce=i)}if(Object.keys(r).forEach((function(e){t.setAttribute(e,r[e])})),"function"==typeof e.insert)e.insert(t);else{var a=o(e.insert||"head");if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(t)}return t}var s,f=(s=[],function(e,t){return s[e]=t,s.filter(Boolean).join("\n")});function d(e,t,n,r){var i=n?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(e.styleSheet)e.styleSheet.cssText=f(t,i);else{var o=document.createTextNode(i),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(o,a[t]):e.appendChild(o)}}function p(e,t,n){var r=n.css,i=n.media,o=n.sourceMap;if(i?e.setAttribute("media",i):e.removeAttribute("media"),o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}var m=null,h=0;function v(e,t){var n,r,i;if(t.singleton){var o=h++;n=m||(m=c(t)),r=d.bind(null,n,o,!1),i=d.bind(null,n,o,!0)}else n=c(t),r=p.bind(null,n,t),i=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else i()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=i());var n=l(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var r=0;r<n.length;r++){var i=u(n[r]);a[i].references--}for(var o=l(e,t),c=0;c<n.length;c++){var s=u(n[c]);0===a[s].references&&(a[s].updater(),a.splice(s,1))}n=o}}}},function(e,t,n){"use strict";e.exports=n(28)},function(e,t,n){"use strict";var r=n(6),i={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},o={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},a={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},u={};function l(e){return r.isMemo(e)?a:u[e.$$typeof]||i}u[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},u[r.Memo]=a;var c=Object.defineProperty,s=Object.getOwnPropertyNames,f=Object.getOwnPropertySymbols,d=Object.getOwnPropertyDescriptor,p=Object.getPrototypeOf,m=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(m){var i=p(n);i&&i!==m&&e(t,i,r)}var a=s(n);f&&(a=a.concat(f(n)));for(var u=l(t),h=l(n),v=0;v<a.length;++v){var y=a[v];if(!(o[y]||r&&r[y]||h&&h[y]||u&&u[y])){var b=d(n,y);try{c(t,y,b)}catch(e){}}}}return t}},function(e,t,n){"use strict";(function(e,r){var i,o=n(19);i="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==e?e:r;var a=Object(o.a)(i);t.a=a}).call(this,n(29),n(30)(e))},function(e,t,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,i=Object.prototype.hasOwnProperty,o=Object.prototype.propertyIsEnumerable;function a(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(e){r[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,u,l=a(e),c=1;c<arguments.length;c++){for(var s in n=Object(arguments[c]))i.call(n,s)&&(l[s]=n[s]);if(r){u=r(n);for(var f=0;f<u.length;f++)o.call(n,u[f])&&(l[u[f]]=n[u[f]])}}return l}},function(e,t,n){"use strict";e.exports=function(e,t){return function(){for(var n=new Array(arguments.length),r=0;r<n.length;r++)n[r]=arguments[r];return e.apply(t,n)}}},function(e,t,n){"use strict";var r=n(1);function i(e){return encodeURIComponent(e).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}e.exports=function(e,t,n){if(!t)return e;var o;if(n)o=n(t);else if(r.isURLSearchParams(t))o=t.toString();else{var a=[];r.forEach(t,(function(e,t){null!=e&&(r.isArray(e)?t+="[]":e=[e],r.forEach(e,(function(e){r.isDate(e)?e=e.toISOString():r.isObject(e)&&(e=JSON.stringify(e)),a.push(i(t)+"="+i(e))})))})),o=a.join("&")}if(o){var u=e.indexOf("#");-1!==u&&(e=e.slice(0,u)),e+=(-1===e.indexOf("?")?"?":"&")+o}return e}},function(e,t,n){"use strict";e.exports=function(e){return!(!e||!e.__CANCEL__)}},function(e,t,n){"use strict";(function(t){var r=n(1),i=n(38),o={"Content-Type":"application/x-www-form-urlencoded"};function a(e,t){!r.isUndefined(e)&&r.isUndefined(e["Content-Type"])&&(e["Content-Type"]=t)}var u,l={adapter:(("undefined"!=typeof XMLHttpRequest||void 0!==t&&"[object process]"===Object.prototype.toString.call(t))&&(u=n(14)),u),transformRequest:[function(e,t){return i(t,"Accept"),i(t,"Content-Type"),r.isFormData(e)||r.isArrayBuffer(e)||r.isBuffer(e)||r.isStream(e)||r.isFile(e)||r.isBlob(e)?e:r.isArrayBufferView(e)?e.buffer:r.isURLSearchParams(e)?(a(t,"application/x-www-form-urlencoded;charset=utf-8"),e.toString()):r.isObject(e)?(a(t,"application/json;charset=utf-8"),JSON.stringify(e)):e}],transformResponse:[function(e){if("string"==typeof e)try{e=JSON.parse(e)}catch(e){}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,validateStatus:function(e){return e>=200&&e<300}};l.headers={common:{Accept:"application/json, text/plain, */*"}},r.forEach(["delete","get","head"],(function(e){l.headers[e]={}})),r.forEach(["post","put","patch"],(function(e){l.headers[e]=r.merge(o)})),e.exports=l}).call(this,n(37))},function(e,t,n){"use strict";var r=n(1),i=n(39),o=n(41),a=n(11),u=n(42),l=n(45),c=n(46),s=n(15);e.exports=function(e){return new Promise((function(t,n){var f=e.data,d=e.headers;r.isFormData(f)&&delete d["Content-Type"];var p=new XMLHttpRequest;if(e.auth){var m=e.auth.username||"",h=e.auth.password?unescape(encodeURIComponent(e.auth.password)):"";d.Authorization="Basic "+btoa(m+":"+h)}var v=u(e.baseURL,e.url);if(p.open(e.method.toUpperCase(),a(v,e.params,e.paramsSerializer),!0),p.timeout=e.timeout,p.onreadystatechange=function(){if(p&&4===p.readyState&&(0!==p.status||p.responseURL&&0===p.responseURL.indexOf("file:"))){var r="getAllResponseHeaders"in p?l(p.getAllResponseHeaders()):null,o={data:e.responseType&&"text"!==e.responseType?p.response:p.responseText,status:p.status,statusText:p.statusText,headers:r,config:e,request:p};i(t,n,o),p=null}},p.onabort=function(){p&&(n(s("Request aborted",e,"ECONNABORTED",p)),p=null)},p.onerror=function(){n(s("Network Error",e,null,p)),p=null},p.ontimeout=function(){var t="timeout of "+e.timeout+"ms exceeded";e.timeoutErrorMessage&&(t=e.timeoutErrorMessage),n(s(t,e,"ECONNABORTED",p)),p=null},r.isStandardBrowserEnv()){var y=(e.withCredentials||c(v))&&e.xsrfCookieName?o.read(e.xsrfCookieName):void 0;y&&(d[e.xsrfHeaderName]=y)}if("setRequestHeader"in p&&r.forEach(d,(function(e,t){void 0===f&&"content-type"===t.toLowerCase()?delete d[t]:p.setRequestHeader(t,e)})),r.isUndefined(e.withCredentials)||(p.withCredentials=!!e.withCredentials),e.responseType)try{p.responseType=e.responseType}catch(t){if("json"!==e.responseType)throw t}"function"==typeof e.onDownloadProgress&&p.addEventListener("progress",e.onDownloadProgress),"function"==typeof e.onUploadProgress&&p.upload&&p.upload.addEventListener("progress",e.onUploadProgress),e.cancelToken&&e.cancelToken.promise.then((function(e){p&&(p.abort(),n(e),p=null)})),f||(f=null),p.send(f)}))}},function(e,t,n){"use strict";var r=n(40);e.exports=function(e,t,n,i,o){var a=new Error(e);return r(a,t,n,i,o)}},function(e,t,n){"use strict";var r=n(1);e.exports=function(e,t){t=t||{};var n={},i=["url","method","data"],o=["headers","auth","proxy","params"],a=["baseURL","transformRequest","transformResponse","paramsSerializer","timeout","timeoutMessage","withCredentials","adapter","responseType","xsrfCookieName","xsrfHeaderName","onUploadProgress","onDownloadProgress","decompress","maxContentLength","maxBodyLength","maxRedirects","transport","httpAgent","httpsAgent","cancelToken","socketPath","responseEncoding"],u=["validateStatus"];function l(e,t){return r.isPlainObject(e)&&r.isPlainObject(t)?r.merge(e,t):r.isPlainObject(t)?r.merge({},t):r.isArray(t)?t.slice():t}function c(i){r.isUndefined(t[i])?r.isUndefined(e[i])||(n[i]=l(void 0,e[i])):n[i]=l(e[i],t[i])}r.forEach(i,(function(e){r.isUndefined(t[e])||(n[e]=l(void 0,t[e]))})),r.forEach(o,c),r.forEach(a,(function(i){r.isUndefined(t[i])?r.isUndefined(e[i])||(n[i]=l(void 0,e[i])):n[i]=l(void 0,t[i])})),r.forEach(u,(function(r){r in t?n[r]=l(e[r],t[r]):r in e&&(n[r]=l(void 0,e[r]))}));var s=i.concat(o).concat(a).concat(u),f=Object.keys(e).concat(Object.keys(t)).filter((function(e){return-1===s.indexOf(e)}));return r.forEach(f,c),n}},function(e,t,n){"use strict";function r(e){this.message=e}r.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},r.prototype.__CANCEL__=!0,e.exports=r},function(e,t,n){var r=n(5),i=n(51);"string"==typeof(i=i.__esModule?i.default:i)&&(i=[[e.i,i,""]]);var o={insert:"head",singleton:!1};r(i,o);e.exports=i.locals||{}},function(e,t,n){"use strict";function r(e){var t,n=e.Symbol;return"function"==typeof n?n.observable?t=n.observable:(t=n("observable"),n.observable=t):t="@@observable",t}n.d(t,"a",(function(){return r}))},,function(e,t,n){"use strict";
/** @license React v16.14.0
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(9),i="function"==typeof Symbol&&Symbol.for,o=i?Symbol.for("react.element"):60103,a=i?Symbol.for("react.portal"):60106,u=i?Symbol.for("react.fragment"):60107,l=i?Symbol.for("react.strict_mode"):60108,c=i?Symbol.for("react.profiler"):60114,s=i?Symbol.for("react.provider"):60109,f=i?Symbol.for("react.context"):60110,d=i?Symbol.for("react.forward_ref"):60112,p=i?Symbol.for("react.suspense"):60113,m=i?Symbol.for("react.memo"):60115,h=i?Symbol.for("react.lazy"):60116,v="function"==typeof Symbol&&Symbol.iterator;function y(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var b={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},g={};function w(e,t,n){this.props=e,this.context=t,this.refs=g,this.updater=n||b}function x(){}function E(e,t,n){this.props=e,this.context=t,this.refs=g,this.updater=n||b}w.prototype.isReactComponent={},w.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(y(85));this.updater.enqueueSetState(this,e,t,"setState")},w.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},x.prototype=w.prototype;var k=E.prototype=new x;k.constructor=E,r(k,w.prototype),k.isPureReactComponent=!0;var S={current:null},T=Object.prototype.hasOwnProperty,C={key:!0,ref:!0,__self:!0,__source:!0};function A(e,t,n){var r,i={},a=null,u=null;if(null!=t)for(r in void 0!==t.ref&&(u=t.ref),void 0!==t.key&&(a=""+t.key),t)T.call(t,r)&&!C.hasOwnProperty(r)&&(i[r]=t[r]);var l=arguments.length-2;if(1===l)i.children=n;else if(1<l){for(var c=Array(l),s=0;s<l;s++)c[s]=arguments[s+2];i.children=c}if(e&&e.defaultProps)for(r in l=e.defaultProps)void 0===i[r]&&(i[r]=l[r]);return{$$typeof:o,type:e,key:a,ref:u,props:i,_owner:S.current}}function O(e){return"object"==typeof e&&null!==e&&e.$$typeof===o}var _=/\/+/g,P=[];function I(e,t,n,r){if(P.length){var i=P.pop();return i.result=e,i.keyPrefix=t,i.func=n,i.context=r,i.count=0,i}return{result:e,keyPrefix:t,func:n,context:r,count:0}}function N(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>P.length&&P.push(e)}function R(e,t,n){return null==e?0:function e(t,n,r,i){var u=typeof t;"undefined"!==u&&"boolean"!==u||(t=null);var l=!1;if(null===t)l=!0;else switch(u){case"string":case"number":l=!0;break;case"object":switch(t.$$typeof){case o:case a:l=!0}}if(l)return r(i,t,""===n?"."+j(t,0):n),1;if(l=0,n=""===n?".":n+":",Array.isArray(t))for(var c=0;c<t.length;c++){var s=n+j(u=t[c],c);l+=e(u,s,r,i)}else if(null===t||"object"!=typeof t?s=null:s="function"==typeof(s=v&&t[v]||t["@@iterator"])?s:null,"function"==typeof s)for(t=s.call(t),c=0;!(u=t.next()).done;)l+=e(u=u.value,s=n+j(u,c++),r,i);else if("object"===u)throw r=""+t,Error(y(31,"[object Object]"===r?"object with keys {"+Object.keys(t).join(", ")+"}":r,""));return l}(e,"",t,n)}function j(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,(function(e){return t[e]}))}(e.key):t.toString(36)}function B(e,t){e.func.call(e.context,t,e.count++)}function M(e,t,n){var r=e.result,i=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?D(e,r,n,(function(e){return e})):null!=e&&(O(e)&&(e=function(e,t){return{$$typeof:o,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(e,i+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(_,"$&/")+"/")+n)),r.push(e))}function D(e,t,n,r,i){var o="";null!=n&&(o=(""+n).replace(_,"$&/")+"/"),R(e,M,t=I(t,o,r,i)),N(t)}var z={current:null};function F(){var e=z.current;if(null===e)throw Error(y(321));return e}var L={ReactCurrentDispatcher:z,ReactCurrentBatchConfig:{suspense:null},ReactCurrentOwner:S,IsSomeRendererActing:{current:!1},assign:r};t.Children={map:function(e,t,n){if(null==e)return e;var r=[];return D(e,r,null,t,n),r},forEach:function(e,t,n){if(null==e)return e;R(e,B,t=I(null,null,t,n)),N(t)},count:function(e){return R(e,(function(){return null}),null)},toArray:function(e){var t=[];return D(e,t,null,(function(e){return e})),t},only:function(e){if(!O(e))throw Error(y(143));return e}},t.Component=w,t.Fragment=u,t.Profiler=c,t.PureComponent=E,t.StrictMode=l,t.Suspense=p,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=L,t.cloneElement=function(e,t,n){if(null==e)throw Error(y(267,e));var i=r({},e.props),a=e.key,u=e.ref,l=e._owner;if(null!=t){if(void 0!==t.ref&&(u=t.ref,l=S.current),void 0!==t.key&&(a=""+t.key),e.type&&e.type.defaultProps)var c=e.type.defaultProps;for(s in t)T.call(t,s)&&!C.hasOwnProperty(s)&&(i[s]=void 0===t[s]&&void 0!==c?c[s]:t[s])}var s=arguments.length-2;if(1===s)i.children=n;else if(1<s){c=Array(s);for(var f=0;f<s;f++)c[f]=arguments[f+2];i.children=c}return{$$typeof:o,type:e.type,key:a,ref:u,props:i,_owner:l}},t.createContext=function(e,t){return void 0===t&&(t=null),(e={$$typeof:f,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:s,_context:e},e.Consumer=e},t.createElement=A,t.createFactory=function(e){var t=A.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:d,render:e}},t.isValidElement=O,t.lazy=function(e){return{$$typeof:h,_ctor:e,_status:-1,_result:null}},t.memo=function(e,t){return{$$typeof:m,type:e,compare:void 0===t?null:t}},t.useCallback=function(e,t){return F().useCallback(e,t)},t.useContext=function(e,t){return F().useContext(e,t)},t.useDebugValue=function(){},t.useEffect=function(e,t){return F().useEffect(e,t)},t.useImperativeHandle=function(e,t,n){return F().useImperativeHandle(e,t,n)},t.useLayoutEffect=function(e,t){return F().useLayoutEffect(e,t)},t.useMemo=function(e,t){return F().useMemo(e,t)},t.useReducer=function(e,t,n){return F().useReducer(e,t,n)},t.useRef=function(e){return F().useRef(e)},t.useState=function(e){return F().useState(e)},t.version="16.14.0"},function(e,t,n){"use strict";
/** @license React v16.14.0
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(0),i=n(9),o=n(23);function a(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!r)throw Error(a(227));function u(e,t,n,r,i,o,a,u,l){var c=Array.prototype.slice.call(arguments,3);try{t.apply(n,c)}catch(e){this.onError(e)}}var l=!1,c=null,s=!1,f=null,d={onError:function(e){l=!0,c=e}};function p(e,t,n,r,i,o,a,s,f){l=!1,c=null,u.apply(d,arguments)}var m=null,h=null,v=null;function y(e,t,n){var r=e.type||"unknown-event";e.currentTarget=v(n),function(e,t,n,r,i,o,u,d,m){if(p.apply(this,arguments),l){if(!l)throw Error(a(198));var h=c;l=!1,c=null,s||(s=!0,f=h)}}(r,t,void 0,e),e.currentTarget=null}var b=null,g={};function w(){if(b)for(var e in g){var t=g[e],n=b.indexOf(e);if(!(-1<n))throw Error(a(96,e));if(!E[n]){if(!t.extractEvents)throw Error(a(97,e));for(var r in E[n]=t,n=t.eventTypes){var i=void 0,o=n[r],u=t,l=r;if(k.hasOwnProperty(l))throw Error(a(99,l));k[l]=o;var c=o.phasedRegistrationNames;if(c){for(i in c)c.hasOwnProperty(i)&&x(c[i],u,l);i=!0}else o.registrationName?(x(o.registrationName,u,l),i=!0):i=!1;if(!i)throw Error(a(98,r,e))}}}}function x(e,t,n){if(S[e])throw Error(a(100,e));S[e]=t,T[e]=t.eventTypes[n].dependencies}var E=[],k={},S={},T={};function C(e){var t,n=!1;for(t in e)if(e.hasOwnProperty(t)){var r=e[t];if(!g.hasOwnProperty(t)||g[t]!==r){if(g[t])throw Error(a(102,t));g[t]=r,n=!0}}n&&w()}var A=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),O=null,_=null,P=null;function I(e){if(e=h(e)){if("function"!=typeof O)throw Error(a(280));var t=e.stateNode;t&&(t=m(t),O(e.stateNode,e.type,t))}}function N(e){_?P?P.push(e):P=[e]:_=e}function R(){if(_){var e=_,t=P;if(P=_=null,I(e),t)for(e=0;e<t.length;e++)I(t[e])}}function j(e,t){return e(t)}function B(e,t,n,r,i){return e(t,n,r,i)}function M(){}var D=j,z=!1,F=!1;function L(){null===_&&null===P||(M(),R())}function U(e,t,n){if(F)return e(t,n);F=!0;try{return D(e,t,n)}finally{F=!1,L()}}var W=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,V=Object.prototype.hasOwnProperty,$={},q={};function H(e,t,n,r,i,o){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=i,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=o}var Q={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){Q[e]=new H(e,0,!1,e,null,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];Q[t]=new H(t,1,!1,e[1],null,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){Q[e]=new H(e,2,!1,e.toLowerCase(),null,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){Q[e]=new H(e,2,!1,e,null,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){Q[e]=new H(e,3,!1,e.toLowerCase(),null,!1)})),["checked","multiple","muted","selected"].forEach((function(e){Q[e]=new H(e,3,!0,e,null,!1)})),["capture","download"].forEach((function(e){Q[e]=new H(e,4,!1,e,null,!1)})),["cols","rows","size","span"].forEach((function(e){Q[e]=new H(e,6,!1,e,null,!1)})),["rowSpan","start"].forEach((function(e){Q[e]=new H(e,5,!1,e.toLowerCase(),null,!1)}));var K=/[\-:]([a-z])/g;function Y(e){return e[1].toUpperCase()}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(K,Y);Q[t]=new H(t,1,!1,e,null,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(K,Y);Q[t]=new H(t,1,!1,e,"http://www.w3.org/1999/xlink",!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(K,Y);Q[t]=new H(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1)})),["tabIndex","crossOrigin"].forEach((function(e){Q[e]=new H(e,1,!1,e.toLowerCase(),null,!1)})),Q.xlinkHref=new H("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0),["src","href","action","formAction"].forEach((function(e){Q[e]=new H(e,1,!1,e.toLowerCase(),null,!0)}));var X=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;function G(e,t,n,r){var i=Q.hasOwnProperty(t)?Q[t]:null;(null!==i?0===i.type:!r&&(2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1])))||(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,i,r)&&(n=null),r||null===i?function(e){return!!V.call(q,e)||!V.call($,e)&&(W.test(e)?q[e]=!0:($[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):i.mustUseProperty?e[i.propertyName]=null===n?3!==i.type&&"":n:(t=i.attributeName,r=i.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(i=i.type)||4===i&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}X.hasOwnProperty("ReactCurrentDispatcher")||(X.ReactCurrentDispatcher={current:null}),X.hasOwnProperty("ReactCurrentBatchConfig")||(X.ReactCurrentBatchConfig={suspense:null});var J=/^(.*)[\\\/]/,Z="function"==typeof Symbol&&Symbol.for,ee=Z?Symbol.for("react.element"):60103,te=Z?Symbol.for("react.portal"):60106,ne=Z?Symbol.for("react.fragment"):60107,re=Z?Symbol.for("react.strict_mode"):60108,ie=Z?Symbol.for("react.profiler"):60114,oe=Z?Symbol.for("react.provider"):60109,ae=Z?Symbol.for("react.context"):60110,ue=Z?Symbol.for("react.concurrent_mode"):60111,le=Z?Symbol.for("react.forward_ref"):60112,ce=Z?Symbol.for("react.suspense"):60113,se=Z?Symbol.for("react.suspense_list"):60120,fe=Z?Symbol.for("react.memo"):60115,de=Z?Symbol.for("react.lazy"):60116,pe=Z?Symbol.for("react.block"):60121,me="function"==typeof Symbol&&Symbol.iterator;function he(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=me&&e[me]||e["@@iterator"])?e:null}function ve(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case ne:return"Fragment";case te:return"Portal";case ie:return"Profiler";case re:return"StrictMode";case ce:return"Suspense";case se:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case ae:return"Context.Consumer";case oe:return"Context.Provider";case le:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case fe:return ve(e.type);case pe:return ve(e.render);case de:if(e=1===e._status?e._result:null)return ve(e)}return null}function ye(e){var t="";do{e:switch(e.tag){case 3:case 4:case 6:case 7:case 10:case 9:var n="";break e;default:var r=e._debugOwner,i=e._debugSource,o=ve(e.type);n=null,r&&(n=ve(r.type)),r=o,o="",i?o=" (at "+i.fileName.replace(J,"")+":"+i.lineNumber+")":n&&(o=" (created by "+n+")"),n="\n    in "+(r||"Unknown")+o}t+=n,e=e.return}while(e);return t}function be(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function ge(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function we(e){e._valueTracker||(e._valueTracker=function(e){var t=ge(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var i=n.get,o=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return i.call(this)},set:function(e){r=""+e,o.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function xe(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=ge(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function Ee(e,t){var n=t.checked;return i({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function ke(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=be(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function Se(e,t){null!=(t=t.checked)&&G(e,"checked",t,!1)}function Te(e,t){Se(e,t);var n=be(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?Ae(e,t.type,n):t.hasOwnProperty("defaultValue")&&Ae(e,t.type,be(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function Ce(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function Ae(e,t,n){"number"===t&&e.ownerDocument.activeElement===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function Oe(e,t){return e=i({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,(function(e){null!=e&&(t+=e)})),t}(t.children))&&(e.children=t),e}function _e(e,t,n,r){if(e=e.options,t){t={};for(var i=0;i<n.length;i++)t["$"+n[i]]=!0;for(n=0;n<e.length;n++)i=t.hasOwnProperty("$"+e[n].value),e[n].selected!==i&&(e[n].selected=i),i&&r&&(e[n].defaultSelected=!0)}else{for(n=""+be(n),t=null,i=0;i<e.length;i++){if(e[i].value===n)return e[i].selected=!0,void(r&&(e[i].defaultSelected=!0));null!==t||e[i].disabled||(t=e[i])}null!==t&&(t.selected=!0)}}function Pe(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(a(91));return i({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function Ie(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(a(92));if(Array.isArray(n)){if(!(1>=n.length))throw Error(a(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:be(n)}}function Ne(e,t){var n=be(t.value),r=be(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function Re(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}var je="http://www.w3.org/1999/xhtml",Be="http://www.w3.org/2000/svg";function Me(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function De(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?Me(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var ze,Fe=function(e){return"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(t,n,r,i){MSApp.execUnsafeLocalFunction((function(){return e(t,n)}))}:e}((function(e,t){if(e.namespaceURI!==Be||"innerHTML"in e)e.innerHTML=t;else{for((ze=ze||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=ze.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}}));function Le(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}function Ue(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var We={animationend:Ue("Animation","AnimationEnd"),animationiteration:Ue("Animation","AnimationIteration"),animationstart:Ue("Animation","AnimationStart"),transitionend:Ue("Transition","TransitionEnd")},Ve={},$e={};function qe(e){if(Ve[e])return Ve[e];if(!We[e])return e;var t,n=We[e];for(t in n)if(n.hasOwnProperty(t)&&t in $e)return Ve[e]=n[t];return e}A&&($e=document.createElement("div").style,"AnimationEvent"in window||(delete We.animationend.animation,delete We.animationiteration.animation,delete We.animationstart.animation),"TransitionEvent"in window||delete We.transitionend.transition);var He=qe("animationend"),Qe=qe("animationiteration"),Ke=qe("animationstart"),Ye=qe("transitionend"),Xe="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Ge=new("function"==typeof WeakMap?WeakMap:Map);function Je(e){var t=Ge.get(e);return void 0===t&&(t=new Map,Ge.set(e,t)),t}function Ze(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(1026&(t=e).effectTag)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function et(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&(null!==(e=e.alternate)&&(t=e.memoizedState)),null!==t)return t.dehydrated}return null}function tt(e){if(Ze(e)!==e)throw Error(a(188))}function nt(e){if(!(e=function(e){var t=e.alternate;if(!t){if(null===(t=Ze(e)))throw Error(a(188));return t!==e?null:e}for(var n=e,r=t;;){var i=n.return;if(null===i)break;var o=i.alternate;if(null===o){if(null!==(r=i.return)){n=r;continue}break}if(i.child===o.child){for(o=i.child;o;){if(o===n)return tt(i),e;if(o===r)return tt(i),t;o=o.sibling}throw Error(a(188))}if(n.return!==r.return)n=i,r=o;else{for(var u=!1,l=i.child;l;){if(l===n){u=!0,n=i,r=o;break}if(l===r){u=!0,r=i,n=o;break}l=l.sibling}if(!u){for(l=o.child;l;){if(l===n){u=!0,n=o,r=i;break}if(l===r){u=!0,r=o,n=i;break}l=l.sibling}if(!u)throw Error(a(189))}}if(n.alternate!==r)throw Error(a(190))}if(3!==n.tag)throw Error(a(188));return n.stateNode.current===n?e:t}(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}function rt(e,t){if(null==t)throw Error(a(30));return null==e?t:Array.isArray(e)?Array.isArray(t)?(e.push.apply(e,t),e):(e.push(t),e):Array.isArray(t)?[e].concat(t):[e,t]}function it(e,t,n){Array.isArray(e)?e.forEach(t,n):e&&t.call(n,e)}var ot=null;function at(e){if(e){var t=e._dispatchListeners,n=e._dispatchInstances;if(Array.isArray(t))for(var r=0;r<t.length&&!e.isPropagationStopped();r++)y(e,t[r],n[r]);else t&&y(e,t,n);e._dispatchListeners=null,e._dispatchInstances=null,e.isPersistent()||e.constructor.release(e)}}function ut(e){if(null!==e&&(ot=rt(ot,e)),e=ot,ot=null,e){if(it(e,at),ot)throw Error(a(95));if(s)throw e=f,s=!1,f=null,e}}function lt(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}function ct(e){if(!A)return!1;var t=(e="on"+e)in document;return t||((t=document.createElement("div")).setAttribute(e,"return;"),t="function"==typeof t[e]),t}var st=[];function ft(e){e.topLevelType=null,e.nativeEvent=null,e.targetInst=null,e.ancestors.length=0,10>st.length&&st.push(e)}function dt(e,t,n,r){if(st.length){var i=st.pop();return i.topLevelType=e,i.eventSystemFlags=r,i.nativeEvent=t,i.targetInst=n,i}return{topLevelType:e,eventSystemFlags:r,nativeEvent:t,targetInst:n,ancestors:[]}}function pt(e){var t=e.targetInst,n=t;do{if(!n){e.ancestors.push(n);break}var r=n;if(3===r.tag)r=r.stateNode.containerInfo;else{for(;r.return;)r=r.return;r=3!==r.tag?null:r.stateNode.containerInfo}if(!r)break;5!==(t=n.tag)&&6!==t||e.ancestors.push(n),n=An(r)}while(n);for(n=0;n<e.ancestors.length;n++){t=e.ancestors[n];var i=lt(e.nativeEvent);r=e.topLevelType;var o=e.nativeEvent,a=e.eventSystemFlags;0===n&&(a|=64);for(var u=null,l=0;l<E.length;l++){var c=E[l];c&&(c=c.extractEvents(r,t,o,i,a))&&(u=rt(u,c))}ut(u)}}function mt(e,t,n){if(!n.has(e)){switch(e){case"scroll":Kt(t,"scroll",!0);break;case"focus":case"blur":Kt(t,"focus",!0),Kt(t,"blur",!0),n.set("blur",null),n.set("focus",null);break;case"cancel":case"close":ct(e)&&Kt(t,e,!0);break;case"invalid":case"submit":case"reset":break;default:-1===Xe.indexOf(e)&&Qt(e,t)}n.set(e,null)}}var ht,vt,yt,bt=!1,gt=[],wt=null,xt=null,Et=null,kt=new Map,St=new Map,Tt=[],Ct="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput close cancel copy cut paste click change contextmenu reset submit".split(" "),At="focus blur dragenter dragleave mouseover mouseout pointerover pointerout gotpointercapture lostpointercapture".split(" ");function Ot(e,t,n,r,i){return{blockedOn:e,topLevelType:t,eventSystemFlags:32|n,nativeEvent:i,container:r}}function _t(e,t){switch(e){case"focus":case"blur":wt=null;break;case"dragenter":case"dragleave":xt=null;break;case"mouseover":case"mouseout":Et=null;break;case"pointerover":case"pointerout":kt.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":St.delete(t.pointerId)}}function Pt(e,t,n,r,i,o){return null===e||e.nativeEvent!==o?(e=Ot(t,n,r,i,o),null!==t&&(null!==(t=On(t))&&vt(t)),e):(e.eventSystemFlags|=r,e)}function It(e){var t=An(e.target);if(null!==t){var n=Ze(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=et(n)))return e.blockedOn=t,void o.unstable_runWithPriority(e.priority,(function(){yt(n)}))}else if(3===t&&n.stateNode.hydrate)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function Nt(e){if(null!==e.blockedOn)return!1;var t=Jt(e.topLevelType,e.eventSystemFlags,e.container,e.nativeEvent);if(null!==t){var n=On(t);return null!==n&&vt(n),e.blockedOn=t,!1}return!0}function Rt(e,t,n){Nt(e)&&n.delete(t)}function jt(){for(bt=!1;0<gt.length;){var e=gt[0];if(null!==e.blockedOn){null!==(e=On(e.blockedOn))&&ht(e);break}var t=Jt(e.topLevelType,e.eventSystemFlags,e.container,e.nativeEvent);null!==t?e.blockedOn=t:gt.shift()}null!==wt&&Nt(wt)&&(wt=null),null!==xt&&Nt(xt)&&(xt=null),null!==Et&&Nt(Et)&&(Et=null),kt.forEach(Rt),St.forEach(Rt)}function Bt(e,t){e.blockedOn===t&&(e.blockedOn=null,bt||(bt=!0,o.unstable_scheduleCallback(o.unstable_NormalPriority,jt)))}function Mt(e){function t(t){return Bt(t,e)}if(0<gt.length){Bt(gt[0],e);for(var n=1;n<gt.length;n++){var r=gt[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==wt&&Bt(wt,e),null!==xt&&Bt(xt,e),null!==Et&&Bt(Et,e),kt.forEach(t),St.forEach(t),n=0;n<Tt.length;n++)(r=Tt[n]).blockedOn===e&&(r.blockedOn=null);for(;0<Tt.length&&null===(n=Tt[0]).blockedOn;)It(n),null===n.blockedOn&&Tt.shift()}var Dt={},zt=new Map,Ft=new Map,Lt=["abort","abort",He,"animationEnd",Qe,"animationIteration",Ke,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart","lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking","seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",Ye,"transitionEnd","waiting","waiting"];function Ut(e,t){for(var n=0;n<e.length;n+=2){var r=e[n],i=e[n+1],o="on"+(i[0].toUpperCase()+i.slice(1));o={phasedRegistrationNames:{bubbled:o,captured:o+"Capture"},dependencies:[r],eventPriority:t},Ft.set(r,t),zt.set(r,o),Dt[i]=o}}Ut("blur blur cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focus focus input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),0),Ut("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1),Ut(Lt,2);for(var Wt="change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),Vt=0;Vt<Wt.length;Vt++)Ft.set(Wt[Vt],0);var $t=o.unstable_UserBlockingPriority,qt=o.unstable_runWithPriority,Ht=!0;function Qt(e,t){Kt(t,e,!1)}function Kt(e,t,n){var r=Ft.get(t);switch(void 0===r?2:r){case 0:r=Yt.bind(null,t,1,e);break;case 1:r=Xt.bind(null,t,1,e);break;default:r=Gt.bind(null,t,1,e)}n?e.addEventListener(t,r,!0):e.addEventListener(t,r,!1)}function Yt(e,t,n,r){z||M();var i=Gt,o=z;z=!0;try{B(i,e,t,n,r)}finally{(z=o)||L()}}function Xt(e,t,n,r){qt($t,Gt.bind(null,e,t,n,r))}function Gt(e,t,n,r){if(Ht)if(0<gt.length&&-1<Ct.indexOf(e))e=Ot(null,e,t,n,r),gt.push(e);else{var i=Jt(e,t,n,r);if(null===i)_t(e,r);else if(-1<Ct.indexOf(e))e=Ot(i,e,t,n,r),gt.push(e);else if(!function(e,t,n,r,i){switch(t){case"focus":return wt=Pt(wt,e,t,n,r,i),!0;case"dragenter":return xt=Pt(xt,e,t,n,r,i),!0;case"mouseover":return Et=Pt(Et,e,t,n,r,i),!0;case"pointerover":var o=i.pointerId;return kt.set(o,Pt(kt.get(o)||null,e,t,n,r,i)),!0;case"gotpointercapture":return o=i.pointerId,St.set(o,Pt(St.get(o)||null,e,t,n,r,i)),!0}return!1}(i,e,t,n,r)){_t(e,r),e=dt(e,r,null,t);try{U(pt,e)}finally{ft(e)}}}}function Jt(e,t,n,r){if(null!==(n=An(n=lt(r)))){var i=Ze(n);if(null===i)n=null;else{var o=i.tag;if(13===o){if(null!==(n=et(i)))return n;n=null}else if(3===o){if(i.stateNode.hydrate)return 3===i.tag?i.stateNode.containerInfo:null;n=null}else i!==n&&(n=null)}}e=dt(e,r,n,t);try{U(pt,e)}finally{ft(e)}return null}var Zt={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},en=["Webkit","ms","Moz","O"];function tn(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||Zt.hasOwnProperty(e)&&Zt[e]?(""+t).trim():t+"px"}function nn(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),i=tn(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,i):e[n]=i}}Object.keys(Zt).forEach((function(e){en.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),Zt[t]=Zt[e]}))}));var rn=i({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function on(e,t){if(t){if(rn[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(a(137,e,""));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(a(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(a(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(a(62,""))}}function an(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var un=je;function ln(e,t){var n=Je(e=9===e.nodeType||11===e.nodeType?e:e.ownerDocument);t=T[t];for(var r=0;r<t.length;r++)mt(t[r],e,n)}function cn(){}function sn(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function fn(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function dn(e,t){var n,r=fn(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=fn(r)}}function pn(){for(var e=window,t=sn();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=sn((e=t.contentWindow).document)}return t}function mn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var hn=null,vn=null;function yn(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function bn(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var gn="function"==typeof setTimeout?setTimeout:void 0,wn="function"==typeof clearTimeout?clearTimeout:void 0;function xn(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break}return e}function En(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var kn=Math.random().toString(36).slice(2),Sn="__reactInternalInstance$"+kn,Tn="__reactEventHandlers$"+kn,Cn="__reactContainere$"+kn;function An(e){var t=e[Sn];if(t)return t;for(var n=e.parentNode;n;){if(t=n[Cn]||n[Sn]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=En(e);null!==e;){if(n=e[Sn])return n;e=En(e)}return t}n=(e=n).parentNode}return null}function On(e){return!(e=e[Sn]||e[Cn])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function _n(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(a(33))}function Pn(e){return e[Tn]||null}function In(e){do{e=e.return}while(e&&5!==e.tag);return e||null}function Nn(e,t){var n=e.stateNode;if(!n)return null;var r=m(n);if(!r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(a(231,t,typeof n));return n}function Rn(e,t,n){(t=Nn(e,n.dispatchConfig.phasedRegistrationNames[t]))&&(n._dispatchListeners=rt(n._dispatchListeners,t),n._dispatchInstances=rt(n._dispatchInstances,e))}function jn(e){if(e&&e.dispatchConfig.phasedRegistrationNames){for(var t=e._targetInst,n=[];t;)n.push(t),t=In(t);for(t=n.length;0<t--;)Rn(n[t],"captured",e);for(t=0;t<n.length;t++)Rn(n[t],"bubbled",e)}}function Bn(e,t,n){e&&n&&n.dispatchConfig.registrationName&&(t=Nn(e,n.dispatchConfig.registrationName))&&(n._dispatchListeners=rt(n._dispatchListeners,t),n._dispatchInstances=rt(n._dispatchInstances,e))}function Mn(e){e&&e.dispatchConfig.registrationName&&Bn(e._targetInst,null,e)}function Dn(e){it(e,jn)}var zn=null,Fn=null,Ln=null;function Un(){if(Ln)return Ln;var e,t,n=Fn,r=n.length,i="value"in zn?zn.value:zn.textContent,o=i.length;for(e=0;e<r&&n[e]===i[e];e++);var a=r-e;for(t=1;t<=a&&n[r-t]===i[o-t];t++);return Ln=i.slice(e,1<t?1-t:void 0)}function Wn(){return!0}function Vn(){return!1}function $n(e,t,n,r){for(var i in this.dispatchConfig=e,this._targetInst=t,this.nativeEvent=n,e=this.constructor.Interface)e.hasOwnProperty(i)&&((t=e[i])?this[i]=t(n):"target"===i?this.target=r:this[i]=n[i]);return this.isDefaultPrevented=(null!=n.defaultPrevented?n.defaultPrevented:!1===n.returnValue)?Wn:Vn,this.isPropagationStopped=Vn,this}function qn(e,t,n,r){if(this.eventPool.length){var i=this.eventPool.pop();return this.call(i,e,t,n,r),i}return new this(e,t,n,r)}function Hn(e){if(!(e instanceof this))throw Error(a(279));e.destructor(),10>this.eventPool.length&&this.eventPool.push(e)}function Qn(e){e.eventPool=[],e.getPooled=qn,e.release=Hn}i($n.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=Wn)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=Wn)},persist:function(){this.isPersistent=Wn},isPersistent:Vn,destructor:function(){var e,t=this.constructor.Interface;for(e in t)this[e]=null;this.nativeEvent=this._targetInst=this.dispatchConfig=null,this.isPropagationStopped=this.isDefaultPrevented=Vn,this._dispatchInstances=this._dispatchListeners=null}}),$n.Interface={type:null,target:null,currentTarget:function(){return null},eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null},$n.extend=function(e){function t(){}function n(){return r.apply(this,arguments)}var r=this;t.prototype=r.prototype;var o=new t;return i(o,n.prototype),n.prototype=o,n.prototype.constructor=n,n.Interface=i({},r.Interface,e),n.extend=r.extend,Qn(n),n},Qn($n);var Kn=$n.extend({data:null}),Yn=$n.extend({data:null}),Xn=[9,13,27,32],Gn=A&&"CompositionEvent"in window,Jn=null;A&&"documentMode"in document&&(Jn=document.documentMode);var Zn=A&&"TextEvent"in window&&!Jn,er=A&&(!Gn||Jn&&8<Jn&&11>=Jn),tr=String.fromCharCode(32),nr={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["compositionend","keypress","textInput","paste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"blur compositionend keydown keypress keyup mousedown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:"blur compositionstart keydown keypress keyup mousedown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"blur compositionupdate keydown keypress keyup mousedown".split(" ")}},rr=!1;function ir(e,t){switch(e){case"keyup":return-1!==Xn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"blur":return!0;default:return!1}}function or(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var ar=!1;var ur={eventTypes:nr,extractEvents:function(e,t,n,r){var i;if(Gn)e:{switch(e){case"compositionstart":var o=nr.compositionStart;break e;case"compositionend":o=nr.compositionEnd;break e;case"compositionupdate":o=nr.compositionUpdate;break e}o=void 0}else ar?ir(e,n)&&(o=nr.compositionEnd):"keydown"===e&&229===n.keyCode&&(o=nr.compositionStart);return o?(er&&"ko"!==n.locale&&(ar||o!==nr.compositionStart?o===nr.compositionEnd&&ar&&(i=Un()):(Fn="value"in(zn=r)?zn.value:zn.textContent,ar=!0)),o=Kn.getPooled(o,t,n,r),i?o.data=i:null!==(i=or(n))&&(o.data=i),Dn(o),i=o):i=null,(e=Zn?function(e,t){switch(e){case"compositionend":return or(t);case"keypress":return 32!==t.which?null:(rr=!0,tr);case"textInput":return(e=t.data)===tr&&rr?null:e;default:return null}}(e,n):function(e,t){if(ar)return"compositionend"===e||!Gn&&ir(e,t)?(e=Un(),Ln=Fn=zn=null,ar=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return er&&"ko"!==t.locale?null:t.data;default:return null}}(e,n))?((t=Yn.getPooled(nr.beforeInput,t,n,r)).data=e,Dn(t)):t=null,null===i?t:null===t?i:[i,t]}},lr={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function cr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!lr[e.type]:"textarea"===t}var sr={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"blur change click focus input keydown keyup selectionchange".split(" ")}};function fr(e,t,n){return(e=$n.getPooled(sr.change,e,t,n)).type="change",N(n),Dn(e),e}var dr=null,pr=null;function mr(e){ut(e)}function hr(e){if(xe(_n(e)))return e}function vr(e,t){if("change"===e)return t}var yr=!1;function br(){dr&&(dr.detachEvent("onpropertychange",gr),pr=dr=null)}function gr(e){if("value"===e.propertyName&&hr(pr))if(e=fr(pr,e,lt(e)),z)ut(e);else{z=!0;try{j(mr,e)}finally{z=!1,L()}}}function wr(e,t,n){"focus"===e?(br(),pr=n,(dr=t).attachEvent("onpropertychange",gr)):"blur"===e&&br()}function xr(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return hr(pr)}function Er(e,t){if("click"===e)return hr(t)}function kr(e,t){if("input"===e||"change"===e)return hr(t)}A&&(yr=ct("input")&&(!document.documentMode||9<document.documentMode));var Sr={eventTypes:sr,_isInputEventSupported:yr,extractEvents:function(e,t,n,r){var i=t?_n(t):window,o=i.nodeName&&i.nodeName.toLowerCase();if("select"===o||"input"===o&&"file"===i.type)var a=vr;else if(cr(i))if(yr)a=kr;else{a=xr;var u=wr}else(o=i.nodeName)&&"input"===o.toLowerCase()&&("checkbox"===i.type||"radio"===i.type)&&(a=Er);if(a&&(a=a(e,t)))return fr(a,n,r);u&&u(e,i,t),"blur"===e&&(e=i._wrapperState)&&e.controlled&&"number"===i.type&&Ae(i,"number",i.value)}},Tr=$n.extend({view:null,detail:null}),Cr={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Ar(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Cr[e])&&!!t[e]}function Or(){return Ar}var _r=0,Pr=0,Ir=!1,Nr=!1,Rr=Tr.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:Or,button:null,buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)},movementX:function(e){if("movementX"in e)return e.movementX;var t=_r;return _r=e.screenX,Ir?"mousemove"===e.type?e.screenX-t:0:(Ir=!0,0)},movementY:function(e){if("movementY"in e)return e.movementY;var t=Pr;return Pr=e.screenY,Nr?"mousemove"===e.type?e.screenY-t:0:(Nr=!0,0)}}),jr=Rr.extend({pointerId:null,width:null,height:null,pressure:null,tangentialPressure:null,tiltX:null,tiltY:null,twist:null,pointerType:null,isPrimary:null}),Br={mouseEnter:{registrationName:"onMouseEnter",dependencies:["mouseout","mouseover"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["mouseout","mouseover"]},pointerEnter:{registrationName:"onPointerEnter",dependencies:["pointerout","pointerover"]},pointerLeave:{registrationName:"onPointerLeave",dependencies:["pointerout","pointerover"]}},Mr={eventTypes:Br,extractEvents:function(e,t,n,r,i){var o="mouseover"===e||"pointerover"===e,a="mouseout"===e||"pointerout"===e;if(o&&0==(32&i)&&(n.relatedTarget||n.fromElement)||!a&&!o)return null;(o=r.window===r?r:(o=r.ownerDocument)?o.defaultView||o.parentWindow:window,a)?(a=t,null!==(t=(t=n.relatedTarget||n.toElement)?An(t):null)&&(t!==Ze(t)||5!==t.tag&&6!==t.tag)&&(t=null)):a=null;if(a===t)return null;if("mouseout"===e||"mouseover"===e)var u=Rr,l=Br.mouseLeave,c=Br.mouseEnter,s="mouse";else"pointerout"!==e&&"pointerover"!==e||(u=jr,l=Br.pointerLeave,c=Br.pointerEnter,s="pointer");if(e=null==a?o:_n(a),o=null==t?o:_n(t),(l=u.getPooled(l,a,n,r)).type=s+"leave",l.target=e,l.relatedTarget=o,(n=u.getPooled(c,t,n,r)).type=s+"enter",n.target=o,n.relatedTarget=e,s=t,(r=a)&&s)e:{for(c=s,a=0,e=u=r;e;e=In(e))a++;for(e=0,t=c;t;t=In(t))e++;for(;0<a-e;)u=In(u),a--;for(;0<e-a;)c=In(c),e--;for(;a--;){if(u===c||u===c.alternate)break e;u=In(u),c=In(c)}u=null}else u=null;for(c=u,u=[];r&&r!==c&&(null===(a=r.alternate)||a!==c);)u.push(r),r=In(r);for(r=[];s&&s!==c&&(null===(a=s.alternate)||a!==c);)r.push(s),s=In(s);for(s=0;s<u.length;s++)Bn(u[s],"bubbled",l);for(s=r.length;0<s--;)Bn(r[s],"captured",n);return 0==(64&i)?[l]:[l,n]}};var Dr="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},zr=Object.prototype.hasOwnProperty;function Fr(e,t){if(Dr(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!zr.call(t,n[r])||!Dr(e[n[r]],t[n[r]]))return!1;return!0}var Lr=A&&"documentMode"in document&&11>=document.documentMode,Ur={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"blur contextmenu dragend focus keydown keyup mousedown mouseup selectionchange".split(" ")}},Wr=null,Vr=null,$r=null,qr=!1;function Hr(e,t){var n=t.window===t?t.document:9===t.nodeType?t:t.ownerDocument;return qr||null==Wr||Wr!==sn(n)?null:("selectionStart"in(n=Wr)&&mn(n)?n={start:n.selectionStart,end:n.selectionEnd}:n={anchorNode:(n=(n.ownerDocument&&n.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset},$r&&Fr($r,n)?null:($r=n,(e=$n.getPooled(Ur.select,Vr,e,t)).type="select",e.target=Wr,Dn(e),e))}var Qr={eventTypes:Ur,extractEvents:function(e,t,n,r,i,o){if(!(o=!(i=o||(r.window===r?r.document:9===r.nodeType?r:r.ownerDocument)))){e:{i=Je(i),o=T.onSelect;for(var a=0;a<o.length;a++)if(!i.has(o[a])){i=!1;break e}i=!0}o=!i}if(o)return null;switch(i=t?_n(t):window,e){case"focus":(cr(i)||"true"===i.contentEditable)&&(Wr=i,Vr=t,$r=null);break;case"blur":$r=Vr=Wr=null;break;case"mousedown":qr=!0;break;case"contextmenu":case"mouseup":case"dragend":return qr=!1,Hr(n,r);case"selectionchange":if(Lr)break;case"keydown":case"keyup":return Hr(n,r)}return null}},Kr=$n.extend({animationName:null,elapsedTime:null,pseudoElement:null}),Yr=$n.extend({clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),Xr=Tr.extend({relatedTarget:null});function Gr(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}var Jr={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},Zr={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},ei=Tr.extend({key:function(e){if(e.key){var t=Jr[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=Gr(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?Zr[e.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:Or,charCode:function(e){return"keypress"===e.type?Gr(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?Gr(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),ti=Rr.extend({dataTransfer:null}),ni=Tr.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:Or}),ri=$n.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),ii=Rr.extend({deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null}),oi={eventTypes:Dt,extractEvents:function(e,t,n,r){var i=zt.get(e);if(!i)return null;switch(e){case"keypress":if(0===Gr(n))return null;case"keydown":case"keyup":e=ei;break;case"blur":case"focus":e=Xr;break;case"click":if(2===n.button)return null;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":e=Rr;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":e=ti;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":e=ni;break;case He:case Qe:case Ke:e=Kr;break;case Ye:e=ri;break;case"scroll":e=Tr;break;case"wheel":e=ii;break;case"copy":case"cut":case"paste":e=Yr;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":e=jr;break;default:e=$n}return Dn(t=e.getPooled(i,t,n,r)),t}};if(b)throw Error(a(101));b=Array.prototype.slice.call("ResponderEventPlugin SimpleEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" ")),w(),m=Pn,h=On,v=_n,C({SimpleEventPlugin:oi,EnterLeaveEventPlugin:Mr,ChangeEventPlugin:Sr,SelectEventPlugin:Qr,BeforeInputEventPlugin:ur});var ai=[],ui=-1;function li(e){0>ui||(e.current=ai[ui],ai[ui]=null,ui--)}function ci(e,t){ui++,ai[ui]=e.current,e.current=t}var si={},fi={current:si},di={current:!1},pi=si;function mi(e,t){var n=e.type.contextTypes;if(!n)return si;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var i,o={};for(i in n)o[i]=t[i];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=o),o}function hi(e){return null!=(e=e.childContextTypes)}function vi(){li(di),li(fi)}function yi(e,t,n){if(fi.current!==si)throw Error(a(168));ci(fi,t),ci(di,n)}function bi(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var o in r=r.getChildContext())if(!(o in e))throw Error(a(108,ve(t)||"Unknown",o));return i({},n,{},r)}function gi(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||si,pi=fi.current,ci(fi,e),ci(di,di.current),!0}function wi(e,t,n){var r=e.stateNode;if(!r)throw Error(a(169));n?(e=bi(e,t,pi),r.__reactInternalMemoizedMergedChildContext=e,li(di),li(fi),ci(fi,e)):li(di),ci(di,n)}var xi=o.unstable_runWithPriority,Ei=o.unstable_scheduleCallback,ki=o.unstable_cancelCallback,Si=o.unstable_requestPaint,Ti=o.unstable_now,Ci=o.unstable_getCurrentPriorityLevel,Ai=o.unstable_ImmediatePriority,Oi=o.unstable_UserBlockingPriority,_i=o.unstable_NormalPriority,Pi=o.unstable_LowPriority,Ii=o.unstable_IdlePriority,Ni={},Ri=o.unstable_shouldYield,ji=void 0!==Si?Si:function(){},Bi=null,Mi=null,Di=!1,zi=Ti(),Fi=1e4>zi?Ti:function(){return Ti()-zi};function Li(){switch(Ci()){case Ai:return 99;case Oi:return 98;case _i:return 97;case Pi:return 96;case Ii:return 95;default:throw Error(a(332))}}function Ui(e){switch(e){case 99:return Ai;case 98:return Oi;case 97:return _i;case 96:return Pi;case 95:return Ii;default:throw Error(a(332))}}function Wi(e,t){return e=Ui(e),xi(e,t)}function Vi(e,t,n){return e=Ui(e),Ei(e,t,n)}function $i(e){return null===Bi?(Bi=[e],Mi=Ei(Ai,Hi)):Bi.push(e),Ni}function qi(){if(null!==Mi){var e=Mi;Mi=null,ki(e)}Hi()}function Hi(){if(!Di&&null!==Bi){Di=!0;var e=0;try{var t=Bi;Wi(99,(function(){for(;e<t.length;e++){var n=t[e];do{n=n(!0)}while(null!==n)}})),Bi=null}catch(t){throw null!==Bi&&(Bi=Bi.slice(e+1)),Ei(Ai,qi),t}finally{Di=!1}}}function Qi(e,t,n){return 1073741821-(1+((1073741821-e+t/10)/(n/=10)|0))*n}function Ki(e,t){if(e&&e.defaultProps)for(var n in t=i({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}var Yi={current:null},Xi=null,Gi=null,Ji=null;function Zi(){Ji=Gi=Xi=null}function eo(e){var t=Yi.current;li(Yi),e.type._context._currentValue=t}function to(e,t){for(;null!==e;){var n=e.alternate;if(e.childExpirationTime<t)e.childExpirationTime=t,null!==n&&n.childExpirationTime<t&&(n.childExpirationTime=t);else{if(!(null!==n&&n.childExpirationTime<t))break;n.childExpirationTime=t}e=e.return}}function no(e,t){Xi=e,Ji=Gi=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(e.expirationTime>=t&&(Pa=!0),e.firstContext=null)}function ro(e,t){if(Ji!==e&&!1!==t&&0!==t)if("number"==typeof t&&1073741823!==t||(Ji=e,t=1073741823),t={context:e,observedBits:t,next:null},null===Gi){if(null===Xi)throw Error(a(308));Gi=t,Xi.dependencies={expirationTime:0,firstContext:t,responders:null}}else Gi=Gi.next=t;return e._currentValue}var io=!1;function oo(e){e.updateQueue={baseState:e.memoizedState,baseQueue:null,shared:{pending:null},effects:null}}function ao(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,baseQueue:e.baseQueue,shared:e.shared,effects:e.effects})}function uo(e,t){return(e={expirationTime:e,suspenseConfig:t,tag:0,payload:null,callback:null,next:null}).next=e}function lo(e,t){if(null!==(e=e.updateQueue)){var n=(e=e.shared).pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}}function co(e,t){var n=e.alternate;null!==n&&ao(n,e),null===(n=(e=e.updateQueue).baseQueue)?(e.baseQueue=t.next=t,t.next=t):(t.next=n.next,n.next=t)}function so(e,t,n,r){var o=e.updateQueue;io=!1;var a=o.baseQueue,u=o.shared.pending;if(null!==u){if(null!==a){var l=a.next;a.next=u.next,u.next=l}a=u,o.shared.pending=null,null!==(l=e.alternate)&&(null!==(l=l.updateQueue)&&(l.baseQueue=u))}if(null!==a){l=a.next;var c=o.baseState,s=0,f=null,d=null,p=null;if(null!==l)for(var m=l;;){if((u=m.expirationTime)<r){var h={expirationTime:m.expirationTime,suspenseConfig:m.suspenseConfig,tag:m.tag,payload:m.payload,callback:m.callback,next:null};null===p?(d=p=h,f=c):p=p.next=h,u>s&&(s=u)}else{null!==p&&(p=p.next={expirationTime:1073741823,suspenseConfig:m.suspenseConfig,tag:m.tag,payload:m.payload,callback:m.callback,next:null}),ol(u,m.suspenseConfig);e:{var v=e,y=m;switch(u=t,h=n,y.tag){case 1:if("function"==typeof(v=y.payload)){c=v.call(h,c,u);break e}c=v;break e;case 3:v.effectTag=-4097&v.effectTag|64;case 0:if(null==(u="function"==typeof(v=y.payload)?v.call(h,c,u):v))break e;c=i({},c,u);break e;case 2:io=!0}}null!==m.callback&&(e.effectTag|=32,null===(u=o.effects)?o.effects=[m]:u.push(m))}if(null===(m=m.next)||m===l){if(null===(u=o.shared.pending))break;m=a.next=u.next,u.next=l,o.baseQueue=a=u,o.shared.pending=null}}null===p?f=c:p.next=d,o.baseState=f,o.baseQueue=p,al(s),e.expirationTime=s,e.memoizedState=c}}function fo(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],i=r.callback;if(null!==i){if(r.callback=null,r=i,i=n,"function"!=typeof r)throw Error(a(191,r));r.call(i)}}}var po=X.ReactCurrentBatchConfig,mo=(new r.Component).refs;function ho(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:i({},t,n),e.memoizedState=n,0===e.expirationTime&&(e.updateQueue.baseState=n)}var vo={isMounted:function(e){return!!(e=e._reactInternalFiber)&&Ze(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternalFiber;var r=Hu(),i=po.suspense;(i=uo(r=Qu(r,e,i),i)).payload=t,null!=n&&(i.callback=n),lo(e,i),Ku(e,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternalFiber;var r=Hu(),i=po.suspense;(i=uo(r=Qu(r,e,i),i)).tag=1,i.payload=t,null!=n&&(i.callback=n),lo(e,i),Ku(e,r)},enqueueForceUpdate:function(e,t){e=e._reactInternalFiber;var n=Hu(),r=po.suspense;(r=uo(n=Qu(n,e,r),r)).tag=2,null!=t&&(r.callback=t),lo(e,r),Ku(e,n)}};function yo(e,t,n,r,i,o,a){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,o,a):!t.prototype||!t.prototype.isPureReactComponent||(!Fr(n,r)||!Fr(i,o))}function bo(e,t,n){var r=!1,i=si,o=t.contextType;return"object"==typeof o&&null!==o?o=ro(o):(i=hi(t)?pi:fi.current,o=(r=null!=(r=t.contextTypes))?mi(e,i):si),t=new t(n,o),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=vo,e.stateNode=t,t._reactInternalFiber=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=i,e.__reactInternalMemoizedMaskedChildContext=o),t}function go(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&vo.enqueueReplaceState(t,t.state,null)}function wo(e,t,n,r){var i=e.stateNode;i.props=n,i.state=e.memoizedState,i.refs=mo,oo(e);var o=t.contextType;"object"==typeof o&&null!==o?i.context=ro(o):(o=hi(t)?pi:fi.current,i.context=mi(e,o)),so(e,n,i,r),i.state=e.memoizedState,"function"==typeof(o=t.getDerivedStateFromProps)&&(ho(e,t,o,n),i.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof i.getSnapshotBeforeUpdate||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||(t=i.state,"function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount(),t!==i.state&&vo.enqueueReplaceState(i,i.state,null),so(e,n,i,r),i.state=e.memoizedState),"function"==typeof i.componentDidMount&&(e.effectTag|=4)}var xo=Array.isArray;function Eo(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(a(309));var r=n.stateNode}if(!r)throw Error(a(147,e));var i=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===i?t.ref:((t=function(e){var t=r.refs;t===mo&&(t=r.refs={}),null===e?delete t[i]:t[i]=e})._stringRef=i,t)}if("string"!=typeof e)throw Error(a(284));if(!n._owner)throw Error(a(290,e))}return e}function ko(e,t){if("textarea"!==e.type)throw Error(a(31,"[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t,""))}function So(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.effectTag=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function i(e,t){return(e=Cl(e,t)).index=0,e.sibling=null,e}function o(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.effectTag=2,n):r:(t.effectTag=2,n):n}function u(t){return e&&null===t.alternate&&(t.effectTag=2),t}function l(e,t,n,r){return null===t||6!==t.tag?((t=_l(n,e.mode,r)).return=e,t):((t=i(t,n)).return=e,t)}function c(e,t,n,r){return null!==t&&t.elementType===n.type?((r=i(t,n.props)).ref=Eo(e,t,n),r.return=e,r):((r=Al(n.type,n.key,n.props,null,e.mode,r)).ref=Eo(e,t,n),r.return=e,r)}function s(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Pl(n,e.mode,r)).return=e,t):((t=i(t,n.children||[])).return=e,t)}function f(e,t,n,r,o){return null===t||7!==t.tag?((t=Ol(n,e.mode,r,o)).return=e,t):((t=i(t,n)).return=e,t)}function d(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=_l(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case ee:return(n=Al(t.type,t.key,t.props,null,e.mode,n)).ref=Eo(e,null,t),n.return=e,n;case te:return(t=Pl(t,e.mode,n)).return=e,t}if(xo(t)||he(t))return(t=Ol(t,e.mode,n,null)).return=e,t;ko(e,t)}return null}function p(e,t,n,r){var i=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==i?null:l(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case ee:return n.key===i?n.type===ne?f(e,t,n.props.children,r,i):c(e,t,n,r):null;case te:return n.key===i?s(e,t,n,r):null}if(xo(n)||he(n))return null!==i?null:f(e,t,n,r,null);ko(e,n)}return null}function m(e,t,n,r,i){if("string"==typeof r||"number"==typeof r)return l(t,e=e.get(n)||null,""+r,i);if("object"==typeof r&&null!==r){switch(r.$$typeof){case ee:return e=e.get(null===r.key?n:r.key)||null,r.type===ne?f(t,e,r.props.children,i,r.key):c(t,e,r,i);case te:return s(t,e=e.get(null===r.key?n:r.key)||null,r,i)}if(xo(r)||he(r))return f(t,e=e.get(n)||null,r,i,null);ko(t,r)}return null}function h(i,a,u,l){for(var c=null,s=null,f=a,h=a=0,v=null;null!==f&&h<u.length;h++){f.index>h?(v=f,f=null):v=f.sibling;var y=p(i,f,u[h],l);if(null===y){null===f&&(f=v);break}e&&f&&null===y.alternate&&t(i,f),a=o(y,a,h),null===s?c=y:s.sibling=y,s=y,f=v}if(h===u.length)return n(i,f),c;if(null===f){for(;h<u.length;h++)null!==(f=d(i,u[h],l))&&(a=o(f,a,h),null===s?c=f:s.sibling=f,s=f);return c}for(f=r(i,f);h<u.length;h++)null!==(v=m(f,i,h,u[h],l))&&(e&&null!==v.alternate&&f.delete(null===v.key?h:v.key),a=o(v,a,h),null===s?c=v:s.sibling=v,s=v);return e&&f.forEach((function(e){return t(i,e)})),c}function v(i,u,l,c){var s=he(l);if("function"!=typeof s)throw Error(a(150));if(null==(l=s.call(l)))throw Error(a(151));for(var f=s=null,h=u,v=u=0,y=null,b=l.next();null!==h&&!b.done;v++,b=l.next()){h.index>v?(y=h,h=null):y=h.sibling;var g=p(i,h,b.value,c);if(null===g){null===h&&(h=y);break}e&&h&&null===g.alternate&&t(i,h),u=o(g,u,v),null===f?s=g:f.sibling=g,f=g,h=y}if(b.done)return n(i,h),s;if(null===h){for(;!b.done;v++,b=l.next())null!==(b=d(i,b.value,c))&&(u=o(b,u,v),null===f?s=b:f.sibling=b,f=b);return s}for(h=r(i,h);!b.done;v++,b=l.next())null!==(b=m(h,i,v,b.value,c))&&(e&&null!==b.alternate&&h.delete(null===b.key?v:b.key),u=o(b,u,v),null===f?s=b:f.sibling=b,f=b);return e&&h.forEach((function(e){return t(i,e)})),s}return function(e,r,o,l){var c="object"==typeof o&&null!==o&&o.type===ne&&null===o.key;c&&(o=o.props.children);var s="object"==typeof o&&null!==o;if(s)switch(o.$$typeof){case ee:e:{for(s=o.key,c=r;null!==c;){if(c.key===s){switch(c.tag){case 7:if(o.type===ne){n(e,c.sibling),(r=i(c,o.props.children)).return=e,e=r;break e}break;default:if(c.elementType===o.type){n(e,c.sibling),(r=i(c,o.props)).ref=Eo(e,c,o),r.return=e,e=r;break e}}n(e,c);break}t(e,c),c=c.sibling}o.type===ne?((r=Ol(o.props.children,e.mode,l,o.key)).return=e,e=r):((l=Al(o.type,o.key,o.props,null,e.mode,l)).ref=Eo(e,r,o),l.return=e,e=l)}return u(e);case te:e:{for(c=o.key;null!==r;){if(r.key===c){if(4===r.tag&&r.stateNode.containerInfo===o.containerInfo&&r.stateNode.implementation===o.implementation){n(e,r.sibling),(r=i(r,o.children||[])).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=Pl(o,e.mode,l)).return=e,e=r}return u(e)}if("string"==typeof o||"number"==typeof o)return o=""+o,null!==r&&6===r.tag?(n(e,r.sibling),(r=i(r,o)).return=e,e=r):(n(e,r),(r=_l(o,e.mode,l)).return=e,e=r),u(e);if(xo(o))return h(e,r,o,l);if(he(o))return v(e,r,o,l);if(s&&ko(e,o),void 0===o&&!c)switch(e.tag){case 1:case 0:throw e=e.type,Error(a(152,e.displayName||e.name||"Component"))}return n(e,r)}}var To=So(!0),Co=So(!1),Ao={},Oo={current:Ao},_o={current:Ao},Po={current:Ao};function Io(e){if(e===Ao)throw Error(a(174));return e}function No(e,t){switch(ci(Po,t),ci(_o,e),ci(Oo,Ao),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:De(null,"");break;default:t=De(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}li(Oo),ci(Oo,t)}function Ro(){li(Oo),li(_o),li(Po)}function jo(e){Io(Po.current);var t=Io(Oo.current),n=De(t,e.type);t!==n&&(ci(_o,e),ci(Oo,n))}function Bo(e){_o.current===e&&(li(Oo),li(_o))}var Mo={current:0};function Do(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(64&t.effectTag))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}function zo(e,t){return{responder:e,props:t}}var Fo=X.ReactCurrentDispatcher,Lo=X.ReactCurrentBatchConfig,Uo=0,Wo=null,Vo=null,$o=null,qo=!1;function Ho(){throw Error(a(321))}function Qo(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!Dr(e[n],t[n]))return!1;return!0}function Ko(e,t,n,r,i,o){if(Uo=o,Wo=t,t.memoizedState=null,t.updateQueue=null,t.expirationTime=0,Fo.current=null===e||null===e.memoizedState?ya:ba,e=n(r,i),t.expirationTime===Uo){o=0;do{if(t.expirationTime=0,!(25>o))throw Error(a(301));o+=1,$o=Vo=null,t.updateQueue=null,Fo.current=ga,e=n(r,i)}while(t.expirationTime===Uo)}if(Fo.current=va,t=null!==Vo&&null!==Vo.next,Uo=0,$o=Vo=Wo=null,qo=!1,t)throw Error(a(300));return e}function Yo(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===$o?Wo.memoizedState=$o=e:$o=$o.next=e,$o}function Xo(){if(null===Vo){var e=Wo.alternate;e=null!==e?e.memoizedState:null}else e=Vo.next;var t=null===$o?Wo.memoizedState:$o.next;if(null!==t)$o=t,Vo=e;else{if(null===e)throw Error(a(310));e={memoizedState:(Vo=e).memoizedState,baseState:Vo.baseState,baseQueue:Vo.baseQueue,queue:Vo.queue,next:null},null===$o?Wo.memoizedState=$o=e:$o=$o.next=e}return $o}function Go(e,t){return"function"==typeof t?t(e):t}function Jo(e){var t=Xo(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=Vo,i=r.baseQueue,o=n.pending;if(null!==o){if(null!==i){var u=i.next;i.next=o.next,o.next=u}r.baseQueue=i=o,n.pending=null}if(null!==i){i=i.next,r=r.baseState;var l=u=o=null,c=i;do{var s=c.expirationTime;if(s<Uo){var f={expirationTime:c.expirationTime,suspenseConfig:c.suspenseConfig,action:c.action,eagerReducer:c.eagerReducer,eagerState:c.eagerState,next:null};null===l?(u=l=f,o=r):l=l.next=f,s>Wo.expirationTime&&(Wo.expirationTime=s,al(s))}else null!==l&&(l=l.next={expirationTime:1073741823,suspenseConfig:c.suspenseConfig,action:c.action,eagerReducer:c.eagerReducer,eagerState:c.eagerState,next:null}),ol(s,c.suspenseConfig),r=c.eagerReducer===e?c.eagerState:e(r,c.action);c=c.next}while(null!==c&&c!==i);null===l?o=r:l.next=u,Dr(r,t.memoizedState)||(Pa=!0),t.memoizedState=r,t.baseState=o,t.baseQueue=l,n.lastRenderedState=r}return[t.memoizedState,n.dispatch]}function Zo(e){var t=Xo(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=n.dispatch,i=n.pending,o=t.memoizedState;if(null!==i){n.pending=null;var u=i=i.next;do{o=e(o,u.action),u=u.next}while(u!==i);Dr(o,t.memoizedState)||(Pa=!0),t.memoizedState=o,null===t.baseQueue&&(t.baseState=o),n.lastRenderedState=o}return[o,r]}function ea(e){var t=Yo();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={pending:null,dispatch:null,lastRenderedReducer:Go,lastRenderedState:e}).dispatch=ha.bind(null,Wo,e),[t.memoizedState,e]}function ta(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=Wo.updateQueue)?(t={lastEffect:null},Wo.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function na(){return Xo().memoizedState}function ra(e,t,n,r){var i=Yo();Wo.effectTag|=e,i.memoizedState=ta(1|t,n,void 0,void 0===r?null:r)}function ia(e,t,n,r){var i=Xo();r=void 0===r?null:r;var o=void 0;if(null!==Vo){var a=Vo.memoizedState;if(o=a.destroy,null!==r&&Qo(r,a.deps))return void ta(t,n,o,r)}Wo.effectTag|=e,i.memoizedState=ta(1|t,n,o,r)}function oa(e,t){return ra(516,4,e,t)}function aa(e,t){return ia(516,4,e,t)}function ua(e,t){return ia(4,2,e,t)}function la(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function ca(e,t,n){return n=null!=n?n.concat([e]):null,ia(4,2,la.bind(null,t,e),n)}function sa(){}function fa(e,t){return Yo().memoizedState=[e,void 0===t?null:t],e}function da(e,t){var n=Xo();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&Qo(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function pa(e,t){var n=Xo();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&Qo(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function ma(e,t,n){var r=Li();Wi(98>r?98:r,(function(){e(!0)})),Wi(97<r?97:r,(function(){var r=Lo.suspense;Lo.suspense=void 0===t?null:t;try{e(!1),n()}finally{Lo.suspense=r}}))}function ha(e,t,n){var r=Hu(),i=po.suspense;i={expirationTime:r=Qu(r,e,i),suspenseConfig:i,action:n,eagerReducer:null,eagerState:null,next:null};var o=t.pending;if(null===o?i.next=i:(i.next=o.next,o.next=i),t.pending=i,o=e.alternate,e===Wo||null!==o&&o===Wo)qo=!0,i.expirationTime=Uo,Wo.expirationTime=Uo;else{if(0===e.expirationTime&&(null===o||0===o.expirationTime)&&null!==(o=t.lastRenderedReducer))try{var a=t.lastRenderedState,u=o(a,n);if(i.eagerReducer=o,i.eagerState=u,Dr(u,a))return}catch(e){}Ku(e,r)}}var va={readContext:ro,useCallback:Ho,useContext:Ho,useEffect:Ho,useImperativeHandle:Ho,useLayoutEffect:Ho,useMemo:Ho,useReducer:Ho,useRef:Ho,useState:Ho,useDebugValue:Ho,useResponder:Ho,useDeferredValue:Ho,useTransition:Ho},ya={readContext:ro,useCallback:fa,useContext:ro,useEffect:oa,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,ra(4,2,la.bind(null,t,e),n)},useLayoutEffect:function(e,t){return ra(4,2,e,t)},useMemo:function(e,t){var n=Yo();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=Yo();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e=(e=r.queue={pending:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=ha.bind(null,Wo,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},Yo().memoizedState=e},useState:ea,useDebugValue:sa,useResponder:zo,useDeferredValue:function(e,t){var n=ea(e),r=n[0],i=n[1];return oa((function(){var n=Lo.suspense;Lo.suspense=void 0===t?null:t;try{i(e)}finally{Lo.suspense=n}}),[e,t]),r},useTransition:function(e){var t=ea(!1),n=t[0];return t=t[1],[fa(ma.bind(null,t,e),[t,e]),n]}},ba={readContext:ro,useCallback:da,useContext:ro,useEffect:aa,useImperativeHandle:ca,useLayoutEffect:ua,useMemo:pa,useReducer:Jo,useRef:na,useState:function(){return Jo(Go)},useDebugValue:sa,useResponder:zo,useDeferredValue:function(e,t){var n=Jo(Go),r=n[0],i=n[1];return aa((function(){var n=Lo.suspense;Lo.suspense=void 0===t?null:t;try{i(e)}finally{Lo.suspense=n}}),[e,t]),r},useTransition:function(e){var t=Jo(Go),n=t[0];return t=t[1],[da(ma.bind(null,t,e),[t,e]),n]}},ga={readContext:ro,useCallback:da,useContext:ro,useEffect:aa,useImperativeHandle:ca,useLayoutEffect:ua,useMemo:pa,useReducer:Zo,useRef:na,useState:function(){return Zo(Go)},useDebugValue:sa,useResponder:zo,useDeferredValue:function(e,t){var n=Zo(Go),r=n[0],i=n[1];return aa((function(){var n=Lo.suspense;Lo.suspense=void 0===t?null:t;try{i(e)}finally{Lo.suspense=n}}),[e,t]),r},useTransition:function(e){var t=Zo(Go),n=t[0];return t=t[1],[da(ma.bind(null,t,e),[t,e]),n]}},wa=null,xa=null,Ea=!1;function ka(e,t){var n=Sl(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.effectTag=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function Sa(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);case 13:default:return!1}}function Ta(e){if(Ea){var t=xa;if(t){var n=t;if(!Sa(e,t)){if(!(t=xn(n.nextSibling))||!Sa(e,t))return e.effectTag=-1025&e.effectTag|2,Ea=!1,void(wa=e);ka(wa,n)}wa=e,xa=xn(t.firstChild)}else e.effectTag=-1025&e.effectTag|2,Ea=!1,wa=e}}function Ca(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;wa=e}function Aa(e){if(e!==wa)return!1;if(!Ea)return Ca(e),Ea=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!bn(t,e.memoizedProps))for(t=xa;t;)ka(e,t),t=xn(t.nextSibling);if(Ca(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(a(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){xa=xn(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}xa=null}}else xa=wa?xn(e.stateNode.nextSibling):null;return!0}function Oa(){xa=wa=null,Ea=!1}var _a=X.ReactCurrentOwner,Pa=!1;function Ia(e,t,n,r){t.child=null===e?Co(t,null,n,r):To(t,e.child,n,r)}function Na(e,t,n,r,i){n=n.render;var o=t.ref;return no(t,i),r=Ko(e,t,n,r,o,i),null===e||Pa?(t.effectTag|=1,Ia(e,t,r,i),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=i&&(e.expirationTime=0),Ka(e,t,i))}function Ra(e,t,n,r,i,o){if(null===e){var a=n.type;return"function"!=typeof a||Tl(a)||void 0!==a.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Al(n.type,null,r,null,t.mode,o)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=a,ja(e,t,a,r,i,o))}return a=e.child,i<o&&(i=a.memoizedProps,(n=null!==(n=n.compare)?n:Fr)(i,r)&&e.ref===t.ref)?Ka(e,t,o):(t.effectTag|=1,(e=Cl(a,r)).ref=t.ref,e.return=t,t.child=e)}function ja(e,t,n,r,i,o){return null!==e&&Fr(e.memoizedProps,r)&&e.ref===t.ref&&(Pa=!1,i<o)?(t.expirationTime=e.expirationTime,Ka(e,t,o)):Ma(e,t,n,r,o)}function Ba(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.effectTag|=128)}function Ma(e,t,n,r,i){var o=hi(n)?pi:fi.current;return o=mi(t,o),no(t,i),n=Ko(e,t,n,r,o,i),null===e||Pa?(t.effectTag|=1,Ia(e,t,n,i),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=i&&(e.expirationTime=0),Ka(e,t,i))}function Da(e,t,n,r,i){if(hi(n)){var o=!0;gi(t)}else o=!1;if(no(t,i),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),bo(t,n,r),wo(t,n,r,i),r=!0;else if(null===e){var a=t.stateNode,u=t.memoizedProps;a.props=u;var l=a.context,c=n.contextType;"object"==typeof c&&null!==c?c=ro(c):c=mi(t,c=hi(n)?pi:fi.current);var s=n.getDerivedStateFromProps,f="function"==typeof s||"function"==typeof a.getSnapshotBeforeUpdate;f||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(u!==r||l!==c)&&go(t,a,r,c),io=!1;var d=t.memoizedState;a.state=d,so(t,r,a,i),l=t.memoizedState,u!==r||d!==l||di.current||io?("function"==typeof s&&(ho(t,n,s,r),l=t.memoizedState),(u=io||yo(t,n,u,r,d,l,c))?(f||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||("function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),"function"==typeof a.componentDidMount&&(t.effectTag|=4)):("function"==typeof a.componentDidMount&&(t.effectTag|=4),t.memoizedProps=r,t.memoizedState=l),a.props=r,a.state=l,a.context=c,r=u):("function"==typeof a.componentDidMount&&(t.effectTag|=4),r=!1)}else a=t.stateNode,ao(e,t),u=t.memoizedProps,a.props=t.type===t.elementType?u:Ki(t.type,u),l=a.context,"object"==typeof(c=n.contextType)&&null!==c?c=ro(c):c=mi(t,c=hi(n)?pi:fi.current),(f="function"==typeof(s=n.getDerivedStateFromProps)||"function"==typeof a.getSnapshotBeforeUpdate)||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(u!==r||l!==c)&&go(t,a,r,c),io=!1,l=t.memoizedState,a.state=l,so(t,r,a,i),d=t.memoizedState,u!==r||l!==d||di.current||io?("function"==typeof s&&(ho(t,n,s,r),d=t.memoizedState),(s=io||yo(t,n,u,r,l,d,c))?(f||"function"!=typeof a.UNSAFE_componentWillUpdate&&"function"!=typeof a.componentWillUpdate||("function"==typeof a.componentWillUpdate&&a.componentWillUpdate(r,d,c),"function"==typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(r,d,c)),"function"==typeof a.componentDidUpdate&&(t.effectTag|=4),"function"==typeof a.getSnapshotBeforeUpdate&&(t.effectTag|=256)):("function"!=typeof a.componentDidUpdate||u===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=4),"function"!=typeof a.getSnapshotBeforeUpdate||u===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=256),t.memoizedProps=r,t.memoizedState=d),a.props=r,a.state=d,a.context=c,r=s):("function"!=typeof a.componentDidUpdate||u===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=4),"function"!=typeof a.getSnapshotBeforeUpdate||u===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=256),r=!1);return za(e,t,n,r,o,i)}function za(e,t,n,r,i,o){Ba(e,t);var a=0!=(64&t.effectTag);if(!r&&!a)return i&&wi(t,n,!1),Ka(e,t,o);r=t.stateNode,_a.current=t;var u=a&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.effectTag|=1,null!==e&&a?(t.child=To(t,e.child,null,o),t.child=To(t,null,u,o)):Ia(e,t,u,o),t.memoizedState=r.state,i&&wi(t,n,!0),t.child}function Fa(e){var t=e.stateNode;t.pendingContext?yi(0,t.pendingContext,t.pendingContext!==t.context):t.context&&yi(0,t.context,!1),No(e,t.containerInfo)}var La,Ua,Wa,Va={dehydrated:null,retryTime:0};function $a(e,t,n){var r,i=t.mode,o=t.pendingProps,a=Mo.current,u=!1;if((r=0!=(64&t.effectTag))||(r=0!=(2&a)&&(null===e||null!==e.memoizedState)),r?(u=!0,t.effectTag&=-65):null!==e&&null===e.memoizedState||void 0===o.fallback||!0===o.unstable_avoidThisFallback||(a|=1),ci(Mo,1&a),null===e){if(void 0!==o.fallback&&Ta(t),u){if(u=o.fallback,(o=Ol(null,i,0,null)).return=t,0==(2&t.mode))for(e=null!==t.memoizedState?t.child.child:t.child,o.child=e;null!==e;)e.return=o,e=e.sibling;return(n=Ol(u,i,n,null)).return=t,o.sibling=n,t.memoizedState=Va,t.child=o,n}return i=o.children,t.memoizedState=null,t.child=Co(t,null,i,n)}if(null!==e.memoizedState){if(i=(e=e.child).sibling,u){if(o=o.fallback,(n=Cl(e,e.pendingProps)).return=t,0==(2&t.mode)&&(u=null!==t.memoizedState?t.child.child:t.child)!==e.child)for(n.child=u;null!==u;)u.return=n,u=u.sibling;return(i=Cl(i,o)).return=t,n.sibling=i,n.childExpirationTime=0,t.memoizedState=Va,t.child=n,i}return n=To(t,e.child,o.children,n),t.memoizedState=null,t.child=n}if(e=e.child,u){if(u=o.fallback,(o=Ol(null,i,0,null)).return=t,o.child=e,null!==e&&(e.return=o),0==(2&t.mode))for(e=null!==t.memoizedState?t.child.child:t.child,o.child=e;null!==e;)e.return=o,e=e.sibling;return(n=Ol(u,i,n,null)).return=t,o.sibling=n,n.effectTag|=2,o.childExpirationTime=0,t.memoizedState=Va,t.child=o,n}return t.memoizedState=null,t.child=To(t,e,o.children,n)}function qa(e,t){e.expirationTime<t&&(e.expirationTime=t);var n=e.alternate;null!==n&&n.expirationTime<t&&(n.expirationTime=t),to(e.return,t)}function Ha(e,t,n,r,i,o){var a=e.memoizedState;null===a?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailExpiration:0,tailMode:i,lastEffect:o}:(a.isBackwards=t,a.rendering=null,a.renderingStartTime=0,a.last=r,a.tail=n,a.tailExpiration=0,a.tailMode=i,a.lastEffect=o)}function Qa(e,t,n){var r=t.pendingProps,i=r.revealOrder,o=r.tail;if(Ia(e,t,r.children,n),0!=(2&(r=Mo.current)))r=1&r|2,t.effectTag|=64;else{if(null!==e&&0!=(64&e.effectTag))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&qa(e,n);else if(19===e.tag)qa(e,n);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(ci(Mo,r),0==(2&t.mode))t.memoizedState=null;else switch(i){case"forwards":for(n=t.child,i=null;null!==n;)null!==(e=n.alternate)&&null===Do(e)&&(i=n),n=n.sibling;null===(n=i)?(i=t.child,t.child=null):(i=n.sibling,n.sibling=null),Ha(t,!1,i,n,o,t.lastEffect);break;case"backwards":for(n=null,i=t.child,t.child=null;null!==i;){if(null!==(e=i.alternate)&&null===Do(e)){t.child=i;break}e=i.sibling,i.sibling=n,n=i,i=e}Ha(t,!0,n,null,o,t.lastEffect);break;case"together":Ha(t,!1,null,null,void 0,t.lastEffect);break;default:t.memoizedState=null}return t.child}function Ka(e,t,n){null!==e&&(t.dependencies=e.dependencies);var r=t.expirationTime;if(0!==r&&al(r),t.childExpirationTime<n)return null;if(null!==e&&t.child!==e.child)throw Error(a(153));if(null!==t.child){for(n=Cl(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Cl(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function Ya(e,t){switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function Xa(e,t,n){var r=t.pendingProps;switch(t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:return hi(t.type)&&vi(),null;case 3:return Ro(),li(di),li(fi),(n=t.stateNode).pendingContext&&(n.context=n.pendingContext,n.pendingContext=null),null!==e&&null!==e.child||!Aa(t)||(t.effectTag|=4),null;case 5:Bo(t),n=Io(Po.current);var o=t.type;if(null!==e&&null!=t.stateNode)Ua(e,t,o,r,n),e.ref!==t.ref&&(t.effectTag|=128);else{if(!r){if(null===t.stateNode)throw Error(a(166));return null}if(e=Io(Oo.current),Aa(t)){r=t.stateNode,o=t.type;var u=t.memoizedProps;switch(r[Sn]=t,r[Tn]=u,o){case"iframe":case"object":case"embed":Qt("load",r);break;case"video":case"audio":for(e=0;e<Xe.length;e++)Qt(Xe[e],r);break;case"source":Qt("error",r);break;case"img":case"image":case"link":Qt("error",r),Qt("load",r);break;case"form":Qt("reset",r),Qt("submit",r);break;case"details":Qt("toggle",r);break;case"input":ke(r,u),Qt("invalid",r),ln(n,"onChange");break;case"select":r._wrapperState={wasMultiple:!!u.multiple},Qt("invalid",r),ln(n,"onChange");break;case"textarea":Ie(r,u),Qt("invalid",r),ln(n,"onChange")}for(var l in on(o,u),e=null,u)if(u.hasOwnProperty(l)){var c=u[l];"children"===l?"string"==typeof c?r.textContent!==c&&(e=["children",c]):"number"==typeof c&&r.textContent!==""+c&&(e=["children",""+c]):S.hasOwnProperty(l)&&null!=c&&ln(n,l)}switch(o){case"input":we(r),Ce(r,u,!0);break;case"textarea":we(r),Re(r);break;case"select":case"option":break;default:"function"==typeof u.onClick&&(r.onclick=cn)}n=e,t.updateQueue=n,null!==n&&(t.effectTag|=4)}else{switch(l=9===n.nodeType?n:n.ownerDocument,e===un&&(e=Me(o)),e===un?"script"===o?((e=l.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=l.createElement(o,{is:r.is}):(e=l.createElement(o),"select"===o&&(l=e,r.multiple?l.multiple=!0:r.size&&(l.size=r.size))):e=l.createElementNS(e,o),e[Sn]=t,e[Tn]=r,La(e,t),t.stateNode=e,l=an(o,r),o){case"iframe":case"object":case"embed":Qt("load",e),c=r;break;case"video":case"audio":for(c=0;c<Xe.length;c++)Qt(Xe[c],e);c=r;break;case"source":Qt("error",e),c=r;break;case"img":case"image":case"link":Qt("error",e),Qt("load",e),c=r;break;case"form":Qt("reset",e),Qt("submit",e),c=r;break;case"details":Qt("toggle",e),c=r;break;case"input":ke(e,r),c=Ee(e,r),Qt("invalid",e),ln(n,"onChange");break;case"option":c=Oe(e,r);break;case"select":e._wrapperState={wasMultiple:!!r.multiple},c=i({},r,{value:void 0}),Qt("invalid",e),ln(n,"onChange");break;case"textarea":Ie(e,r),c=Pe(e,r),Qt("invalid",e),ln(n,"onChange");break;default:c=r}on(o,c);var s=c;for(u in s)if(s.hasOwnProperty(u)){var f=s[u];"style"===u?nn(e,f):"dangerouslySetInnerHTML"===u?null!=(f=f?f.__html:void 0)&&Fe(e,f):"children"===u?"string"==typeof f?("textarea"!==o||""!==f)&&Le(e,f):"number"==typeof f&&Le(e,""+f):"suppressContentEditableWarning"!==u&&"suppressHydrationWarning"!==u&&"autoFocus"!==u&&(S.hasOwnProperty(u)?null!=f&&ln(n,u):null!=f&&G(e,u,f,l))}switch(o){case"input":we(e),Ce(e,r,!1);break;case"textarea":we(e),Re(e);break;case"option":null!=r.value&&e.setAttribute("value",""+be(r.value));break;case"select":e.multiple=!!r.multiple,null!=(n=r.value)?_e(e,!!r.multiple,n,!1):null!=r.defaultValue&&_e(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof c.onClick&&(e.onclick=cn)}yn(o,r)&&(t.effectTag|=4)}null!==t.ref&&(t.effectTag|=128)}return null;case 6:if(e&&null!=t.stateNode)Wa(0,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(a(166));n=Io(Po.current),Io(Oo.current),Aa(t)?(n=t.stateNode,r=t.memoizedProps,n[Sn]=t,n.nodeValue!==r&&(t.effectTag|=4)):((n=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[Sn]=t,t.stateNode=n)}return null;case 13:return li(Mo),r=t.memoizedState,0!=(64&t.effectTag)?(t.expirationTime=n,t):(n=null!==r,r=!1,null===e?void 0!==t.memoizedProps.fallback&&Aa(t):(r=null!==(o=e.memoizedState),n||null===o||null!==(o=e.child.sibling)&&(null!==(u=t.firstEffect)?(t.firstEffect=o,o.nextEffect=u):(t.firstEffect=t.lastEffect=o,o.nextEffect=null),o.effectTag=8)),n&&!r&&0!=(2&t.mode)&&(null===e&&!0!==t.memoizedProps.unstable_avoidThisFallback||0!=(1&Mo.current)?Au===wu&&(Au=xu):(Au!==wu&&Au!==xu||(Au=Eu),0!==Nu&&null!==Su&&(Rl(Su,Cu),jl(Su,Nu)))),(n||r)&&(t.effectTag|=4),null);case 4:return Ro(),null;case 10:return eo(t),null;case 17:return hi(t.type)&&vi(),null;case 19:if(li(Mo),null===(r=t.memoizedState))return null;if(o=0!=(64&t.effectTag),null===(u=r.rendering)){if(o)Ya(r,!1);else if(Au!==wu||null!==e&&0!=(64&e.effectTag))for(u=t.child;null!==u;){if(null!==(e=Do(u))){for(t.effectTag|=64,Ya(r,!1),null!==(o=e.updateQueue)&&(t.updateQueue=o,t.effectTag|=4),null===r.lastEffect&&(t.firstEffect=null),t.lastEffect=r.lastEffect,r=t.child;null!==r;)u=n,(o=r).effectTag&=2,o.nextEffect=null,o.firstEffect=null,o.lastEffect=null,null===(e=o.alternate)?(o.childExpirationTime=0,o.expirationTime=u,o.child=null,o.memoizedProps=null,o.memoizedState=null,o.updateQueue=null,o.dependencies=null):(o.childExpirationTime=e.childExpirationTime,o.expirationTime=e.expirationTime,o.child=e.child,o.memoizedProps=e.memoizedProps,o.memoizedState=e.memoizedState,o.updateQueue=e.updateQueue,u=e.dependencies,o.dependencies=null===u?null:{expirationTime:u.expirationTime,firstContext:u.firstContext,responders:u.responders}),r=r.sibling;return ci(Mo,1&Mo.current|2),t.child}u=u.sibling}}else{if(!o)if(null!==(e=Do(u))){if(t.effectTag|=64,o=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.effectTag|=4),Ya(r,!0),null===r.tail&&"hidden"===r.tailMode&&!u.alternate)return null!==(t=t.lastEffect=r.lastEffect)&&(t.nextEffect=null),null}else 2*Fi()-r.renderingStartTime>r.tailExpiration&&1<n&&(t.effectTag|=64,o=!0,Ya(r,!1),t.expirationTime=t.childExpirationTime=n-1);r.isBackwards?(u.sibling=t.child,t.child=u):(null!==(n=r.last)?n.sibling=u:t.child=u,r.last=u)}return null!==r.tail?(0===r.tailExpiration&&(r.tailExpiration=Fi()+500),n=r.tail,r.rendering=n,r.tail=n.sibling,r.lastEffect=t.lastEffect,r.renderingStartTime=Fi(),n.sibling=null,t=Mo.current,ci(Mo,o?1&t|2:1&t),n):null}throw Error(a(156,t.tag))}function Ga(e){switch(e.tag){case 1:hi(e.type)&&vi();var t=e.effectTag;return 4096&t?(e.effectTag=-4097&t|64,e):null;case 3:if(Ro(),li(di),li(fi),0!=(64&(t=e.effectTag)))throw Error(a(285));return e.effectTag=-4097&t|64,e;case 5:return Bo(e),null;case 13:return li(Mo),4096&(t=e.effectTag)?(e.effectTag=-4097&t|64,e):null;case 19:return li(Mo),null;case 4:return Ro(),null;case 10:return eo(e),null;default:return null}}function Ja(e,t){return{value:e,source:t,stack:ye(t)}}La=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Ua=function(e,t,n,r,o){var a=e.memoizedProps;if(a!==r){var u,l,c=t.stateNode;switch(Io(Oo.current),e=null,n){case"input":a=Ee(c,a),r=Ee(c,r),e=[];break;case"option":a=Oe(c,a),r=Oe(c,r),e=[];break;case"select":a=i({},a,{value:void 0}),r=i({},r,{value:void 0}),e=[];break;case"textarea":a=Pe(c,a),r=Pe(c,r),e=[];break;default:"function"!=typeof a.onClick&&"function"==typeof r.onClick&&(c.onclick=cn)}for(u in on(n,r),n=null,a)if(!r.hasOwnProperty(u)&&a.hasOwnProperty(u)&&null!=a[u])if("style"===u)for(l in c=a[u])c.hasOwnProperty(l)&&(n||(n={}),n[l]="");else"dangerouslySetInnerHTML"!==u&&"children"!==u&&"suppressContentEditableWarning"!==u&&"suppressHydrationWarning"!==u&&"autoFocus"!==u&&(S.hasOwnProperty(u)?e||(e=[]):(e=e||[]).push(u,null));for(u in r){var s=r[u];if(c=null!=a?a[u]:void 0,r.hasOwnProperty(u)&&s!==c&&(null!=s||null!=c))if("style"===u)if(c){for(l in c)!c.hasOwnProperty(l)||s&&s.hasOwnProperty(l)||(n||(n={}),n[l]="");for(l in s)s.hasOwnProperty(l)&&c[l]!==s[l]&&(n||(n={}),n[l]=s[l])}else n||(e||(e=[]),e.push(u,n)),n=s;else"dangerouslySetInnerHTML"===u?(s=s?s.__html:void 0,c=c?c.__html:void 0,null!=s&&c!==s&&(e=e||[]).push(u,s)):"children"===u?c===s||"string"!=typeof s&&"number"!=typeof s||(e=e||[]).push(u,""+s):"suppressContentEditableWarning"!==u&&"suppressHydrationWarning"!==u&&(S.hasOwnProperty(u)?(null!=s&&ln(o,u),e||c===s||(e=[])):(e=e||[]).push(u,s))}n&&(e=e||[]).push("style",n),o=e,(t.updateQueue=o)&&(t.effectTag|=4)}},Wa=function(e,t,n,r){n!==r&&(t.effectTag|=4)};var Za="function"==typeof WeakSet?WeakSet:Set;function eu(e,t){var n=t.source,r=t.stack;null===r&&null!==n&&(r=ye(n)),null!==n&&ve(n.type),t=t.value,null!==e&&1===e.tag&&ve(e.type);try{console.error(t)}catch(e){setTimeout((function(){throw e}))}}function tu(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){bl(e,t)}else t.current=null}function nu(e,t){switch(t.tag){case 0:case 11:case 15:case 22:return;case 1:if(256&t.effectTag&&null!==e){var n=e.memoizedProps,r=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?n:Ki(t.type,n),r),e.__reactInternalSnapshotBeforeUpdate=t}return;case 3:case 5:case 6:case 4:case 17:return}throw Error(a(163))}function ru(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.destroy;n.destroy=void 0,void 0!==r&&r()}n=n.next}while(n!==t)}}function iu(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.create;n.destroy=r()}n=n.next}while(n!==t)}}function ou(e,t,n){switch(n.tag){case 0:case 11:case 15:case 22:return void iu(3,n);case 1:if(e=n.stateNode,4&n.effectTag)if(null===t)e.componentDidMount();else{var r=n.elementType===n.type?t.memoizedProps:Ki(n.type,t.memoizedProps);e.componentDidUpdate(r,t.memoizedState,e.__reactInternalSnapshotBeforeUpdate)}return void(null!==(t=n.updateQueue)&&fo(n,t,e));case 3:if(null!==(t=n.updateQueue)){if(e=null,null!==n.child)switch(n.child.tag){case 5:e=n.child.stateNode;break;case 1:e=n.child.stateNode}fo(n,t,e)}return;case 5:return e=n.stateNode,void(null===t&&4&n.effectTag&&yn(n.type,n.memoizedProps)&&e.focus());case 6:case 4:case 12:return;case 13:return void(null===n.memoizedState&&(n=n.alternate,null!==n&&(n=n.memoizedState,null!==n&&(n=n.dehydrated,null!==n&&Mt(n)))));case 19:case 17:case 20:case 21:return}throw Error(a(163))}function au(e,t,n){switch("function"==typeof El&&El(t),t.tag){case 0:case 11:case 14:case 15:case 22:if(null!==(e=t.updateQueue)&&null!==(e=e.lastEffect)){var r=e.next;Wi(97<n?97:n,(function(){var e=r;do{var n=e.destroy;if(void 0!==n){var i=t;try{n()}catch(e){bl(i,e)}}e=e.next}while(e!==r)}))}break;case 1:tu(t),"function"==typeof(n=t.stateNode).componentWillUnmount&&function(e,t){try{t.props=e.memoizedProps,t.state=e.memoizedState,t.componentWillUnmount()}catch(t){bl(e,t)}}(t,n);break;case 5:tu(t);break;case 4:su(e,t,n)}}function uu(e){var t=e.alternate;e.return=null,e.child=null,e.memoizedState=null,e.updateQueue=null,e.dependencies=null,e.alternate=null,e.firstEffect=null,e.lastEffect=null,e.pendingProps=null,e.memoizedProps=null,e.stateNode=null,null!==t&&uu(t)}function lu(e){return 5===e.tag||3===e.tag||4===e.tag}function cu(e){e:{for(var t=e.return;null!==t;){if(lu(t)){var n=t;break e}t=t.return}throw Error(a(160))}switch(t=n.stateNode,n.tag){case 5:var r=!1;break;case 3:case 4:t=t.containerInfo,r=!0;break;default:throw Error(a(161))}16&n.effectTag&&(Le(t,""),n.effectTag&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||lu(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.effectTag)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.effectTag)){n=n.stateNode;break e}}r?function e(t,n,r){var i=t.tag,o=5===i||6===i;if(o)t=o?t.stateNode:t.stateNode.instance,n?8===r.nodeType?r.parentNode.insertBefore(t,n):r.insertBefore(t,n):(8===r.nodeType?(n=r.parentNode).insertBefore(t,r):(n=r).appendChild(t),null!==(r=r._reactRootContainer)&&void 0!==r||null!==n.onclick||(n.onclick=cn));else if(4!==i&&null!==(t=t.child))for(e(t,n,r),t=t.sibling;null!==t;)e(t,n,r),t=t.sibling}(e,n,t):function e(t,n,r){var i=t.tag,o=5===i||6===i;if(o)t=o?t.stateNode:t.stateNode.instance,n?r.insertBefore(t,n):r.appendChild(t);else if(4!==i&&null!==(t=t.child))for(e(t,n,r),t=t.sibling;null!==t;)e(t,n,r),t=t.sibling}(e,n,t)}function su(e,t,n){for(var r,i,o=t,u=!1;;){if(!u){u=o.return;e:for(;;){if(null===u)throw Error(a(160));switch(r=u.stateNode,u.tag){case 5:i=!1;break e;case 3:case 4:r=r.containerInfo,i=!0;break e}u=u.return}u=!0}if(5===o.tag||6===o.tag){e:for(var l=e,c=o,s=n,f=c;;)if(au(l,f,s),null!==f.child&&4!==f.tag)f.child.return=f,f=f.child;else{if(f===c)break e;for(;null===f.sibling;){if(null===f.return||f.return===c)break e;f=f.return}f.sibling.return=f.return,f=f.sibling}i?(l=r,c=o.stateNode,8===l.nodeType?l.parentNode.removeChild(c):l.removeChild(c)):r.removeChild(o.stateNode)}else if(4===o.tag){if(null!==o.child){r=o.stateNode.containerInfo,i=!0,o.child.return=o,o=o.child;continue}}else if(au(e,o,n),null!==o.child){o.child.return=o,o=o.child;continue}if(o===t)break;for(;null===o.sibling;){if(null===o.return||o.return===t)return;4===(o=o.return).tag&&(u=!1)}o.sibling.return=o.return,o=o.sibling}}function fu(e,t){switch(t.tag){case 0:case 11:case 14:case 15:case 22:return void ru(3,t);case 1:return;case 5:var n=t.stateNode;if(null!=n){var r=t.memoizedProps,i=null!==e?e.memoizedProps:r;e=t.type;var o=t.updateQueue;if(t.updateQueue=null,null!==o){for(n[Tn]=r,"input"===e&&"radio"===r.type&&null!=r.name&&Se(n,r),an(e,i),t=an(e,r),i=0;i<o.length;i+=2){var u=o[i],l=o[i+1];"style"===u?nn(n,l):"dangerouslySetInnerHTML"===u?Fe(n,l):"children"===u?Le(n,l):G(n,u,l,t)}switch(e){case"input":Te(n,r);break;case"textarea":Ne(n,r);break;case"select":t=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!r.multiple,null!=(e=r.value)?_e(n,!!r.multiple,e,!1):t!==!!r.multiple&&(null!=r.defaultValue?_e(n,!!r.multiple,r.defaultValue,!0):_e(n,!!r.multiple,r.multiple?[]:"",!1))}}}return;case 6:if(null===t.stateNode)throw Error(a(162));return void(t.stateNode.nodeValue=t.memoizedProps);case 3:return void((t=t.stateNode).hydrate&&(t.hydrate=!1,Mt(t.containerInfo)));case 12:return;case 13:if(n=t,null===t.memoizedState?r=!1:(r=!0,n=t.child,ju=Fi()),null!==n)e:for(e=n;;){if(5===e.tag)o=e.stateNode,r?"function"==typeof(o=o.style).setProperty?o.setProperty("display","none","important"):o.display="none":(o=e.stateNode,i=null!=(i=e.memoizedProps.style)&&i.hasOwnProperty("display")?i.display:null,o.style.display=tn("display",i));else if(6===e.tag)e.stateNode.nodeValue=r?"":e.memoizedProps;else{if(13===e.tag&&null!==e.memoizedState&&null===e.memoizedState.dehydrated){(o=e.child.sibling).return=e,e=o;continue}if(null!==e.child){e.child.return=e,e=e.child;continue}}if(e===n)break;for(;null===e.sibling;){if(null===e.return||e.return===n)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}return void du(t);case 19:return void du(t);case 17:return}throw Error(a(163))}function du(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new Za),t.forEach((function(t){var r=wl.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}var pu="function"==typeof WeakMap?WeakMap:Map;function mu(e,t,n){(n=uo(n,null)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Mu||(Mu=!0,Du=r),eu(e,t)},n}function hu(e,t,n){(n=uo(n,null)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var i=t.value;n.payload=function(){return eu(e,t),r(i)}}var o=e.stateNode;return null!==o&&"function"==typeof o.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===zu?zu=new Set([this]):zu.add(this),eu(e,t));var n=t.stack;this.componentDidCatch(t.value,{componentStack:null!==n?n:""})}),n}var vu,yu=Math.ceil,bu=X.ReactCurrentDispatcher,gu=X.ReactCurrentOwner,wu=0,xu=3,Eu=4,ku=0,Su=null,Tu=null,Cu=0,Au=wu,Ou=null,_u=1073741823,Pu=1073741823,Iu=null,Nu=0,Ru=!1,ju=0,Bu=null,Mu=!1,Du=null,zu=null,Fu=!1,Lu=null,Uu=90,Wu=null,Vu=0,$u=null,qu=0;function Hu(){return 0!=(48&ku)?1073741821-(Fi()/10|0):0!==qu?qu:qu=1073741821-(Fi()/10|0)}function Qu(e,t,n){if(0==(2&(t=t.mode)))return 1073741823;var r=Li();if(0==(4&t))return 99===r?1073741823:1073741822;if(0!=(16&ku))return Cu;if(null!==n)e=Qi(e,0|n.timeoutMs||5e3,250);else switch(r){case 99:e=1073741823;break;case 98:e=Qi(e,150,100);break;case 97:case 96:e=Qi(e,5e3,250);break;case 95:e=2;break;default:throw Error(a(326))}return null!==Su&&e===Cu&&--e,e}function Ku(e,t){if(50<Vu)throw Vu=0,$u=null,Error(a(185));if(null!==(e=Yu(e,t))){var n=Li();1073741823===t?0!=(8&ku)&&0==(48&ku)?Zu(e):(Gu(e),0===ku&&qi()):Gu(e),0==(4&ku)||98!==n&&99!==n||(null===Wu?Wu=new Map([[e,t]]):(void 0===(n=Wu.get(e))||n>t)&&Wu.set(e,t))}}function Yu(e,t){e.expirationTime<t&&(e.expirationTime=t);var n=e.alternate;null!==n&&n.expirationTime<t&&(n.expirationTime=t);var r=e.return,i=null;if(null===r&&3===e.tag)i=e.stateNode;else for(;null!==r;){if(n=r.alternate,r.childExpirationTime<t&&(r.childExpirationTime=t),null!==n&&n.childExpirationTime<t&&(n.childExpirationTime=t),null===r.return&&3===r.tag){i=r.stateNode;break}r=r.return}return null!==i&&(Su===i&&(al(t),Au===Eu&&Rl(i,Cu)),jl(i,t)),i}function Xu(e){var t=e.lastExpiredTime;if(0!==t)return t;if(!Nl(e,t=e.firstPendingTime))return t;var n=e.lastPingedTime;return 2>=(e=n>(e=e.nextKnownPendingLevel)?n:e)&&t!==e?0:e}function Gu(e){if(0!==e.lastExpiredTime)e.callbackExpirationTime=1073741823,e.callbackPriority=99,e.callbackNode=$i(Zu.bind(null,e));else{var t=Xu(e),n=e.callbackNode;if(0===t)null!==n&&(e.callbackNode=null,e.callbackExpirationTime=0,e.callbackPriority=90);else{var r=Hu();if(1073741823===t?r=99:1===t||2===t?r=95:r=0>=(r=10*(1073741821-t)-10*(1073741821-r))?99:250>=r?98:5250>=r?97:95,null!==n){var i=e.callbackPriority;if(e.callbackExpirationTime===t&&i>=r)return;n!==Ni&&ki(n)}e.callbackExpirationTime=t,e.callbackPriority=r,t=1073741823===t?$i(Zu.bind(null,e)):Vi(r,Ju.bind(null,e),{timeout:10*(1073741821-t)-Fi()}),e.callbackNode=t}}}function Ju(e,t){if(qu=0,t)return Bl(e,t=Hu()),Gu(e),null;var n=Xu(e);if(0!==n){if(t=e.callbackNode,0!=(48&ku))throw Error(a(327));if(hl(),e===Su&&n===Cu||nl(e,n),null!==Tu){var r=ku;ku|=16;for(var i=il();;)try{ll();break}catch(t){rl(e,t)}if(Zi(),ku=r,bu.current=i,1===Au)throw t=Ou,nl(e,n),Rl(e,n),Gu(e),t;if(null===Tu)switch(i=e.finishedWork=e.current.alternate,e.finishedExpirationTime=n,r=Au,Su=null,r){case wu:case 1:throw Error(a(345));case 2:Bl(e,2<n?2:n);break;case xu:if(Rl(e,n),n===(r=e.lastSuspendedTime)&&(e.nextKnownPendingLevel=fl(i)),1073741823===_u&&10<(i=ju+500-Fi())){if(Ru){var o=e.lastPingedTime;if(0===o||o>=n){e.lastPingedTime=n,nl(e,n);break}}if(0!==(o=Xu(e))&&o!==n)break;if(0!==r&&r!==n){e.lastPingedTime=r;break}e.timeoutHandle=gn(dl.bind(null,e),i);break}dl(e);break;case Eu:if(Rl(e,n),n===(r=e.lastSuspendedTime)&&(e.nextKnownPendingLevel=fl(i)),Ru&&(0===(i=e.lastPingedTime)||i>=n)){e.lastPingedTime=n,nl(e,n);break}if(0!==(i=Xu(e))&&i!==n)break;if(0!==r&&r!==n){e.lastPingedTime=r;break}if(1073741823!==Pu?r=10*(1073741821-Pu)-Fi():1073741823===_u?r=0:(r=10*(1073741821-_u)-5e3,0>(r=(i=Fi())-r)&&(r=0),(n=10*(1073741821-n)-i)<(r=(120>r?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*yu(r/1960))-r)&&(r=n)),10<r){e.timeoutHandle=gn(dl.bind(null,e),r);break}dl(e);break;case 5:if(1073741823!==_u&&null!==Iu){o=_u;var u=Iu;if(0>=(r=0|u.busyMinDurationMs)?r=0:(i=0|u.busyDelayMs,r=(o=Fi()-(10*(1073741821-o)-(0|u.timeoutMs||5e3)))<=i?0:i+r-o),10<r){Rl(e,n),e.timeoutHandle=gn(dl.bind(null,e),r);break}}dl(e);break;default:throw Error(a(329))}if(Gu(e),e.callbackNode===t)return Ju.bind(null,e)}}return null}function Zu(e){var t=e.lastExpiredTime;if(t=0!==t?t:1073741823,0!=(48&ku))throw Error(a(327));if(hl(),e===Su&&t===Cu||nl(e,t),null!==Tu){var n=ku;ku|=16;for(var r=il();;)try{ul();break}catch(t){rl(e,t)}if(Zi(),ku=n,bu.current=r,1===Au)throw n=Ou,nl(e,t),Rl(e,t),Gu(e),n;if(null!==Tu)throw Error(a(261));e.finishedWork=e.current.alternate,e.finishedExpirationTime=t,Su=null,dl(e),Gu(e)}return null}function el(e,t){var n=ku;ku|=1;try{return e(t)}finally{0===(ku=n)&&qi()}}function tl(e,t){var n=ku;ku&=-2,ku|=8;try{return e(t)}finally{0===(ku=n)&&qi()}}function nl(e,t){e.finishedWork=null,e.finishedExpirationTime=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,wn(n)),null!==Tu)for(n=Tu.return;null!==n;){var r=n;switch(r.tag){case 1:null!=(r=r.type.childContextTypes)&&vi();break;case 3:Ro(),li(di),li(fi);break;case 5:Bo(r);break;case 4:Ro();break;case 13:case 19:li(Mo);break;case 10:eo(r)}n=n.return}Su=e,Tu=Cl(e.current,null),Cu=t,Au=wu,Ou=null,Pu=_u=1073741823,Iu=null,Nu=0,Ru=!1}function rl(e,t){for(;;){try{if(Zi(),Fo.current=va,qo)for(var n=Wo.memoizedState;null!==n;){var r=n.queue;null!==r&&(r.pending=null),n=n.next}if(Uo=0,$o=Vo=Wo=null,qo=!1,null===Tu||null===Tu.return)return Au=1,Ou=t,Tu=null;e:{var i=e,o=Tu.return,a=Tu,u=t;if(t=Cu,a.effectTag|=2048,a.firstEffect=a.lastEffect=null,null!==u&&"object"==typeof u&&"function"==typeof u.then){var l=u;if(0==(2&a.mode)){var c=a.alternate;c?(a.updateQueue=c.updateQueue,a.memoizedState=c.memoizedState,a.expirationTime=c.expirationTime):(a.updateQueue=null,a.memoizedState=null)}var s=0!=(1&Mo.current),f=o;do{var d;if(d=13===f.tag){var p=f.memoizedState;if(null!==p)d=null!==p.dehydrated;else{var m=f.memoizedProps;d=void 0!==m.fallback&&(!0!==m.unstable_avoidThisFallback||!s)}}if(d){var h=f.updateQueue;if(null===h){var v=new Set;v.add(l),f.updateQueue=v}else h.add(l);if(0==(2&f.mode)){if(f.effectTag|=64,a.effectTag&=-2981,1===a.tag)if(null===a.alternate)a.tag=17;else{var y=uo(1073741823,null);y.tag=2,lo(a,y)}a.expirationTime=1073741823;break e}u=void 0,a=t;var b=i.pingCache;if(null===b?(b=i.pingCache=new pu,u=new Set,b.set(l,u)):void 0===(u=b.get(l))&&(u=new Set,b.set(l,u)),!u.has(a)){u.add(a);var g=gl.bind(null,i,l,a);l.then(g,g)}f.effectTag|=4096,f.expirationTime=t;break e}f=f.return}while(null!==f);u=Error((ve(a.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display."+ye(a))}5!==Au&&(Au=2),u=Ja(u,a),f=o;do{switch(f.tag){case 3:l=u,f.effectTag|=4096,f.expirationTime=t,co(f,mu(f,l,t));break e;case 1:l=u;var w=f.type,x=f.stateNode;if(0==(64&f.effectTag)&&("function"==typeof w.getDerivedStateFromError||null!==x&&"function"==typeof x.componentDidCatch&&(null===zu||!zu.has(x)))){f.effectTag|=4096,f.expirationTime=t,co(f,hu(f,l,t));break e}}f=f.return}while(null!==f)}Tu=sl(Tu)}catch(e){t=e;continue}break}}function il(){var e=bu.current;return bu.current=va,null===e?va:e}function ol(e,t){e<_u&&2<e&&(_u=e),null!==t&&e<Pu&&2<e&&(Pu=e,Iu=t)}function al(e){e>Nu&&(Nu=e)}function ul(){for(;null!==Tu;)Tu=cl(Tu)}function ll(){for(;null!==Tu&&!Ri();)Tu=cl(Tu)}function cl(e){var t=vu(e.alternate,e,Cu);return e.memoizedProps=e.pendingProps,null===t&&(t=sl(e)),gu.current=null,t}function sl(e){Tu=e;do{var t=Tu.alternate;if(e=Tu.return,0==(2048&Tu.effectTag)){if(t=Xa(t,Tu,Cu),1===Cu||1!==Tu.childExpirationTime){for(var n=0,r=Tu.child;null!==r;){var i=r.expirationTime,o=r.childExpirationTime;i>n&&(n=i),o>n&&(n=o),r=r.sibling}Tu.childExpirationTime=n}if(null!==t)return t;null!==e&&0==(2048&e.effectTag)&&(null===e.firstEffect&&(e.firstEffect=Tu.firstEffect),null!==Tu.lastEffect&&(null!==e.lastEffect&&(e.lastEffect.nextEffect=Tu.firstEffect),e.lastEffect=Tu.lastEffect),1<Tu.effectTag&&(null!==e.lastEffect?e.lastEffect.nextEffect=Tu:e.firstEffect=Tu,e.lastEffect=Tu))}else{if(null!==(t=Ga(Tu)))return t.effectTag&=2047,t;null!==e&&(e.firstEffect=e.lastEffect=null,e.effectTag|=2048)}if(null!==(t=Tu.sibling))return t;Tu=e}while(null!==Tu);return Au===wu&&(Au=5),null}function fl(e){var t=e.expirationTime;return t>(e=e.childExpirationTime)?t:e}function dl(e){var t=Li();return Wi(99,pl.bind(null,e,t)),null}function pl(e,t){do{hl()}while(null!==Lu);if(0!=(48&ku))throw Error(a(327));var n=e.finishedWork,r=e.finishedExpirationTime;if(null===n)return null;if(e.finishedWork=null,e.finishedExpirationTime=0,n===e.current)throw Error(a(177));e.callbackNode=null,e.callbackExpirationTime=0,e.callbackPriority=90,e.nextKnownPendingLevel=0;var i=fl(n);if(e.firstPendingTime=i,r<=e.lastSuspendedTime?e.firstSuspendedTime=e.lastSuspendedTime=e.nextKnownPendingLevel=0:r<=e.firstSuspendedTime&&(e.firstSuspendedTime=r-1),r<=e.lastPingedTime&&(e.lastPingedTime=0),r<=e.lastExpiredTime&&(e.lastExpiredTime=0),e===Su&&(Tu=Su=null,Cu=0),1<n.effectTag?null!==n.lastEffect?(n.lastEffect.nextEffect=n,i=n.firstEffect):i=n:i=n.firstEffect,null!==i){var o=ku;ku|=32,gu.current=null,hn=Ht;var u=pn();if(mn(u)){if("selectionStart"in u)var l={start:u.selectionStart,end:u.selectionEnd};else e:{var c=(l=(l=u.ownerDocument)&&l.defaultView||window).getSelection&&l.getSelection();if(c&&0!==c.rangeCount){l=c.anchorNode;var s=c.anchorOffset,f=c.focusNode;c=c.focusOffset;try{l.nodeType,f.nodeType}catch(e){l=null;break e}var d=0,p=-1,m=-1,h=0,v=0,y=u,b=null;t:for(;;){for(var g;y!==l||0!==s&&3!==y.nodeType||(p=d+s),y!==f||0!==c&&3!==y.nodeType||(m=d+c),3===y.nodeType&&(d+=y.nodeValue.length),null!==(g=y.firstChild);)b=y,y=g;for(;;){if(y===u)break t;if(b===l&&++h===s&&(p=d),b===f&&++v===c&&(m=d),null!==(g=y.nextSibling))break;b=(y=b).parentNode}y=g}l=-1===p||-1===m?null:{start:p,end:m}}else l=null}l=l||{start:0,end:0}}else l=null;vn={activeElementDetached:null,focusedElem:u,selectionRange:l},Ht=!1,Bu=i;do{try{ml()}catch(e){if(null===Bu)throw Error(a(330));bl(Bu,e),Bu=Bu.nextEffect}}while(null!==Bu);Bu=i;do{try{for(u=e,l=t;null!==Bu;){var w=Bu.effectTag;if(16&w&&Le(Bu.stateNode,""),128&w){var x=Bu.alternate;if(null!==x){var E=x.ref;null!==E&&("function"==typeof E?E(null):E.current=null)}}switch(1038&w){case 2:cu(Bu),Bu.effectTag&=-3;break;case 6:cu(Bu),Bu.effectTag&=-3,fu(Bu.alternate,Bu);break;case 1024:Bu.effectTag&=-1025;break;case 1028:Bu.effectTag&=-1025,fu(Bu.alternate,Bu);break;case 4:fu(Bu.alternate,Bu);break;case 8:su(u,s=Bu,l),uu(s)}Bu=Bu.nextEffect}}catch(e){if(null===Bu)throw Error(a(330));bl(Bu,e),Bu=Bu.nextEffect}}while(null!==Bu);if(E=vn,x=pn(),w=E.focusedElem,l=E.selectionRange,x!==w&&w&&w.ownerDocument&&function e(t,n){return!(!t||!n)&&(t===n||(!t||3!==t.nodeType)&&(n&&3===n.nodeType?e(t,n.parentNode):"contains"in t?t.contains(n):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(n))))}(w.ownerDocument.documentElement,w)){null!==l&&mn(w)&&(x=l.start,void 0===(E=l.end)&&(E=x),"selectionStart"in w?(w.selectionStart=x,w.selectionEnd=Math.min(E,w.value.length)):(E=(x=w.ownerDocument||document)&&x.defaultView||window).getSelection&&(E=E.getSelection(),s=w.textContent.length,u=Math.min(l.start,s),l=void 0===l.end?u:Math.min(l.end,s),!E.extend&&u>l&&(s=l,l=u,u=s),s=dn(w,u),f=dn(w,l),s&&f&&(1!==E.rangeCount||E.anchorNode!==s.node||E.anchorOffset!==s.offset||E.focusNode!==f.node||E.focusOffset!==f.offset)&&((x=x.createRange()).setStart(s.node,s.offset),E.removeAllRanges(),u>l?(E.addRange(x),E.extend(f.node,f.offset)):(x.setEnd(f.node,f.offset),E.addRange(x))))),x=[];for(E=w;E=E.parentNode;)1===E.nodeType&&x.push({element:E,left:E.scrollLeft,top:E.scrollTop});for("function"==typeof w.focus&&w.focus(),w=0;w<x.length;w++)(E=x[w]).element.scrollLeft=E.left,E.element.scrollTop=E.top}Ht=!!hn,vn=hn=null,e.current=n,Bu=i;do{try{for(w=e;null!==Bu;){var k=Bu.effectTag;if(36&k&&ou(w,Bu.alternate,Bu),128&k){x=void 0;var S=Bu.ref;if(null!==S){var T=Bu.stateNode;switch(Bu.tag){case 5:x=T;break;default:x=T}"function"==typeof S?S(x):S.current=x}}Bu=Bu.nextEffect}}catch(e){if(null===Bu)throw Error(a(330));bl(Bu,e),Bu=Bu.nextEffect}}while(null!==Bu);Bu=null,ji(),ku=o}else e.current=n;if(Fu)Fu=!1,Lu=e,Uu=t;else for(Bu=i;null!==Bu;)t=Bu.nextEffect,Bu.nextEffect=null,Bu=t;if(0===(t=e.firstPendingTime)&&(zu=null),1073741823===t?e===$u?Vu++:(Vu=0,$u=e):Vu=0,"function"==typeof xl&&xl(n.stateNode,r),Gu(e),Mu)throw Mu=!1,e=Du,Du=null,e;return 0!=(8&ku)||qi(),null}function ml(){for(;null!==Bu;){var e=Bu.effectTag;0!=(256&e)&&nu(Bu.alternate,Bu),0==(512&e)||Fu||(Fu=!0,Vi(97,(function(){return hl(),null}))),Bu=Bu.nextEffect}}function hl(){if(90!==Uu){var e=97<Uu?97:Uu;return Uu=90,Wi(e,vl)}}function vl(){if(null===Lu)return!1;var e=Lu;if(Lu=null,0!=(48&ku))throw Error(a(331));var t=ku;for(ku|=32,e=e.current.firstEffect;null!==e;){try{var n=e;if(0!=(512&n.effectTag))switch(n.tag){case 0:case 11:case 15:case 22:ru(5,n),iu(5,n)}}catch(t){if(null===e)throw Error(a(330));bl(e,t)}n=e.nextEffect,e.nextEffect=null,e=n}return ku=t,qi(),!0}function yl(e,t,n){lo(e,t=mu(e,t=Ja(n,t),1073741823)),null!==(e=Yu(e,1073741823))&&Gu(e)}function bl(e,t){if(3===e.tag)yl(e,e,t);else for(var n=e.return;null!==n;){if(3===n.tag){yl(n,e,t);break}if(1===n.tag){var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===zu||!zu.has(r))){lo(n,e=hu(n,e=Ja(t,e),1073741823)),null!==(n=Yu(n,1073741823))&&Gu(n);break}}n=n.return}}function gl(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),Su===e&&Cu===n?Au===Eu||Au===xu&&1073741823===_u&&Fi()-ju<500?nl(e,Cu):Ru=!0:Nl(e,n)&&(0!==(t=e.lastPingedTime)&&t<n||(e.lastPingedTime=n,Gu(e)))}function wl(e,t){var n=e.stateNode;null!==n&&n.delete(t),0===(t=0)&&(t=Qu(t=Hu(),e,null)),null!==(e=Yu(e,t))&&Gu(e)}vu=function(e,t,n){var r=t.expirationTime;if(null!==e){var i=t.pendingProps;if(e.memoizedProps!==i||di.current)Pa=!0;else{if(r<n){switch(Pa=!1,t.tag){case 3:Fa(t),Oa();break;case 5:if(jo(t),4&t.mode&&1!==n&&i.hidden)return t.expirationTime=t.childExpirationTime=1,null;break;case 1:hi(t.type)&&gi(t);break;case 4:No(t,t.stateNode.containerInfo);break;case 10:r=t.memoizedProps.value,i=t.type._context,ci(Yi,i._currentValue),i._currentValue=r;break;case 13:if(null!==t.memoizedState)return 0!==(r=t.child.childExpirationTime)&&r>=n?$a(e,t,n):(ci(Mo,1&Mo.current),null!==(t=Ka(e,t,n))?t.sibling:null);ci(Mo,1&Mo.current);break;case 19:if(r=t.childExpirationTime>=n,0!=(64&e.effectTag)){if(r)return Qa(e,t,n);t.effectTag|=64}if(null!==(i=t.memoizedState)&&(i.rendering=null,i.tail=null),ci(Mo,Mo.current),!r)return null}return Ka(e,t,n)}Pa=!1}}else Pa=!1;switch(t.expirationTime=0,t.tag){case 2:if(r=t.type,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps,i=mi(t,fi.current),no(t,n),i=Ko(null,t,r,e,i,n),t.effectTag|=1,"object"==typeof i&&null!==i&&"function"==typeof i.render&&void 0===i.$$typeof){if(t.tag=1,t.memoizedState=null,t.updateQueue=null,hi(r)){var o=!0;gi(t)}else o=!1;t.memoizedState=null!==i.state&&void 0!==i.state?i.state:null,oo(t);var u=r.getDerivedStateFromProps;"function"==typeof u&&ho(t,r,u,e),i.updater=vo,t.stateNode=i,i._reactInternalFiber=t,wo(t,r,e,n),t=za(null,t,r,!0,o,n)}else t.tag=0,Ia(null,t,i,n),t=t.child;return t;case 16:e:{if(i=t.elementType,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps,function(e){if(-1===e._status){e._status=0;var t=e._ctor;t=t(),e._result=t,t.then((function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)}),(function(t){0===e._status&&(e._status=2,e._result=t)}))}}(i),1!==i._status)throw i._result;switch(i=i._result,t.type=i,o=t.tag=function(e){if("function"==typeof e)return Tl(e)?1:0;if(null!=e){if((e=e.$$typeof)===le)return 11;if(e===fe)return 14}return 2}(i),e=Ki(i,e),o){case 0:t=Ma(null,t,i,e,n);break e;case 1:t=Da(null,t,i,e,n);break e;case 11:t=Na(null,t,i,e,n);break e;case 14:t=Ra(null,t,i,Ki(i.type,e),r,n);break e}throw Error(a(306,i,""))}return t;case 0:return r=t.type,i=t.pendingProps,Ma(e,t,r,i=t.elementType===r?i:Ki(r,i),n);case 1:return r=t.type,i=t.pendingProps,Da(e,t,r,i=t.elementType===r?i:Ki(r,i),n);case 3:if(Fa(t),r=t.updateQueue,null===e||null===r)throw Error(a(282));if(r=t.pendingProps,i=null!==(i=t.memoizedState)?i.element:null,ao(e,t),so(t,r,null,n),(r=t.memoizedState.element)===i)Oa(),t=Ka(e,t,n);else{if((i=t.stateNode.hydrate)&&(xa=xn(t.stateNode.containerInfo.firstChild),wa=t,i=Ea=!0),i)for(n=Co(t,null,r,n),t.child=n;n;)n.effectTag=-3&n.effectTag|1024,n=n.sibling;else Ia(e,t,r,n),Oa();t=t.child}return t;case 5:return jo(t),null===e&&Ta(t),r=t.type,i=t.pendingProps,o=null!==e?e.memoizedProps:null,u=i.children,bn(r,i)?u=null:null!==o&&bn(r,o)&&(t.effectTag|=16),Ba(e,t),4&t.mode&&1!==n&&i.hidden?(t.expirationTime=t.childExpirationTime=1,t=null):(Ia(e,t,u,n),t=t.child),t;case 6:return null===e&&Ta(t),null;case 13:return $a(e,t,n);case 4:return No(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=To(t,null,r,n):Ia(e,t,r,n),t.child;case 11:return r=t.type,i=t.pendingProps,Na(e,t,r,i=t.elementType===r?i:Ki(r,i),n);case 7:return Ia(e,t,t.pendingProps,n),t.child;case 8:case 12:return Ia(e,t,t.pendingProps.children,n),t.child;case 10:e:{r=t.type._context,i=t.pendingProps,u=t.memoizedProps,o=i.value;var l=t.type._context;if(ci(Yi,l._currentValue),l._currentValue=o,null!==u)if(l=u.value,0===(o=Dr(l,o)?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(l,o):1073741823))){if(u.children===i.children&&!di.current){t=Ka(e,t,n);break e}}else for(null!==(l=t.child)&&(l.return=t);null!==l;){var c=l.dependencies;if(null!==c){u=l.child;for(var s=c.firstContext;null!==s;){if(s.context===r&&0!=(s.observedBits&o)){1===l.tag&&((s=uo(n,null)).tag=2,lo(l,s)),l.expirationTime<n&&(l.expirationTime=n),null!==(s=l.alternate)&&s.expirationTime<n&&(s.expirationTime=n),to(l.return,n),c.expirationTime<n&&(c.expirationTime=n);break}s=s.next}}else u=10===l.tag&&l.type===t.type?null:l.child;if(null!==u)u.return=l;else for(u=l;null!==u;){if(u===t){u=null;break}if(null!==(l=u.sibling)){l.return=u.return,u=l;break}u=u.return}l=u}Ia(e,t,i.children,n),t=t.child}return t;case 9:return i=t.type,r=(o=t.pendingProps).children,no(t,n),r=r(i=ro(i,o.unstable_observedBits)),t.effectTag|=1,Ia(e,t,r,n),t.child;case 14:return o=Ki(i=t.type,t.pendingProps),Ra(e,t,i,o=Ki(i.type,o),r,n);case 15:return ja(e,t,t.type,t.pendingProps,r,n);case 17:return r=t.type,i=t.pendingProps,i=t.elementType===r?i:Ki(r,i),null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),t.tag=1,hi(r)?(e=!0,gi(t)):e=!1,no(t,n),bo(t,r,i),wo(t,r,i,n),za(null,t,r,!0,e,n);case 19:return Qa(e,t,n)}throw Error(a(156,t.tag))};var xl=null,El=null;function kl(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.effectTag=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childExpirationTime=this.expirationTime=0,this.alternate=null}function Sl(e,t,n,r){return new kl(e,t,n,r)}function Tl(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Cl(e,t){var n=e.alternate;return null===n?((n=Sl(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.effectTag=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childExpirationTime=e.childExpirationTime,n.expirationTime=e.expirationTime,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{expirationTime:t.expirationTime,firstContext:t.firstContext,responders:t.responders},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Al(e,t,n,r,i,o){var u=2;if(r=e,"function"==typeof e)Tl(e)&&(u=1);else if("string"==typeof e)u=5;else e:switch(e){case ne:return Ol(n.children,i,o,t);case ue:u=8,i|=7;break;case re:u=8,i|=1;break;case ie:return(e=Sl(12,n,t,8|i)).elementType=ie,e.type=ie,e.expirationTime=o,e;case ce:return(e=Sl(13,n,t,i)).type=ce,e.elementType=ce,e.expirationTime=o,e;case se:return(e=Sl(19,n,t,i)).elementType=se,e.expirationTime=o,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case oe:u=10;break e;case ae:u=9;break e;case le:u=11;break e;case fe:u=14;break e;case de:u=16,r=null;break e;case pe:u=22;break e}throw Error(a(130,null==e?e:typeof e,""))}return(t=Sl(u,n,t,i)).elementType=e,t.type=r,t.expirationTime=o,t}function Ol(e,t,n,r){return(e=Sl(7,e,r,t)).expirationTime=n,e}function _l(e,t,n){return(e=Sl(6,e,null,t)).expirationTime=n,e}function Pl(e,t,n){return(t=Sl(4,null!==e.children?e.children:[],e.key,t)).expirationTime=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Il(e,t,n){this.tag=t,this.current=null,this.containerInfo=e,this.pingCache=this.pendingChildren=null,this.finishedExpirationTime=0,this.finishedWork=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=n,this.callbackNode=null,this.callbackPriority=90,this.lastExpiredTime=this.lastPingedTime=this.nextKnownPendingLevel=this.lastSuspendedTime=this.firstSuspendedTime=this.firstPendingTime=0}function Nl(e,t){var n=e.firstSuspendedTime;return e=e.lastSuspendedTime,0!==n&&n>=t&&e<=t}function Rl(e,t){var n=e.firstSuspendedTime,r=e.lastSuspendedTime;n<t&&(e.firstSuspendedTime=t),(r>t||0===n)&&(e.lastSuspendedTime=t),t<=e.lastPingedTime&&(e.lastPingedTime=0),t<=e.lastExpiredTime&&(e.lastExpiredTime=0)}function jl(e,t){t>e.firstPendingTime&&(e.firstPendingTime=t);var n=e.firstSuspendedTime;0!==n&&(t>=n?e.firstSuspendedTime=e.lastSuspendedTime=e.nextKnownPendingLevel=0:t>=e.lastSuspendedTime&&(e.lastSuspendedTime=t+1),t>e.nextKnownPendingLevel&&(e.nextKnownPendingLevel=t))}function Bl(e,t){var n=e.lastExpiredTime;(0===n||n>t)&&(e.lastExpiredTime=t)}function Ml(e,t,n,r){var i=t.current,o=Hu(),u=po.suspense;o=Qu(o,i,u);e:if(n){t:{if(Ze(n=n._reactInternalFiber)!==n||1!==n.tag)throw Error(a(170));var l=n;do{switch(l.tag){case 3:l=l.stateNode.context;break t;case 1:if(hi(l.type)){l=l.stateNode.__reactInternalMemoizedMergedChildContext;break t}}l=l.return}while(null!==l);throw Error(a(171))}if(1===n.tag){var c=n.type;if(hi(c)){n=bi(n,c,l);break e}}n=l}else n=si;return null===t.context?t.context=n:t.pendingContext=n,(t=uo(o,u)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),lo(i,t),Ku(i,o),o}function Dl(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function zl(e,t){null!==(e=e.memoizedState)&&null!==e.dehydrated&&e.retryTime<t&&(e.retryTime=t)}function Fl(e,t){zl(e,t),(e=e.alternate)&&zl(e,t)}function Ll(e,t,n){var r=new Il(e,t,n=null!=n&&!0===n.hydrate),i=Sl(3,null,null,2===t?7:1===t?3:0);r.current=i,i.stateNode=r,oo(i),e[Cn]=r.current,n&&0!==t&&function(e,t){var n=Je(t);Ct.forEach((function(e){mt(e,t,n)})),At.forEach((function(e){mt(e,t,n)}))}(0,9===e.nodeType?e:e.ownerDocument),this._internalRoot=r}function Ul(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Wl(e,t,n,r,i){var o=n._reactRootContainer;if(o){var a=o._internalRoot;if("function"==typeof i){var u=i;i=function(){var e=Dl(a);u.call(e)}}Ml(t,a,e,i)}else{if(o=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new Ll(e,0,t?{hydrate:!0}:void 0)}(n,r),a=o._internalRoot,"function"==typeof i){var l=i;i=function(){var e=Dl(a);l.call(e)}}tl((function(){Ml(t,a,e,i)}))}return Dl(a)}function Vl(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:te,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}function $l(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Ul(t))throw Error(a(200));return Vl(e,t,null,n)}Ll.prototype.render=function(e){Ml(e,this._internalRoot,null,null)},Ll.prototype.unmount=function(){var e=this._internalRoot,t=e.containerInfo;Ml(null,e,null,(function(){t[Cn]=null}))},ht=function(e){if(13===e.tag){var t=Qi(Hu(),150,100);Ku(e,t),Fl(e,t)}},vt=function(e){13===e.tag&&(Ku(e,3),Fl(e,3))},yt=function(e){if(13===e.tag){var t=Hu();Ku(e,t=Qu(t,e,null)),Fl(e,t)}},O=function(e,t,n){switch(t){case"input":if(Te(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var i=Pn(r);if(!i)throw Error(a(90));xe(r),Te(r,i)}}}break;case"textarea":Ne(e,n);break;case"select":null!=(t=n.value)&&_e(e,!!n.multiple,t,!1)}},j=el,B=function(e,t,n,r,i){var o=ku;ku|=4;try{return Wi(98,e.bind(null,t,n,r,i))}finally{0===(ku=o)&&qi()}},M=function(){0==(49&ku)&&(function(){if(null!==Wu){var e=Wu;Wu=null,e.forEach((function(e,t){Bl(t,e),Gu(t)})),qi()}}(),hl())},D=function(e,t){var n=ku;ku|=2;try{return e(t)}finally{0===(ku=n)&&qi()}};var ql,Hl,Ql={Events:[On,_n,Pn,C,k,Dn,function(e){it(e,Mn)},N,R,Gt,ut,hl,{current:!1}]};Hl=(ql={findFiberByHostInstance:An,bundleType:0,version:"16.14.0",rendererPackageName:"react-dom"}).findFiberByHostInstance,function(e){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(t.isDisabled||!t.supportsFiber)return!0;try{var n=t.inject(e);xl=function(e){try{t.onCommitFiberRoot(n,e,void 0,64==(64&e.current.effectTag))}catch(e){}},El=function(e){try{t.onCommitFiberUnmount(n,e)}catch(e){}}}catch(e){}}(i({},ql,{overrideHookState:null,overrideProps:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:X.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=nt(e))?null:e.stateNode},findFiberByHostInstance:function(e){return Hl?Hl(e):null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null})),t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=Ql,t.createPortal=$l,t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternalFiber;if(void 0===t){if("function"==typeof e.render)throw Error(a(188));throw Error(a(268,Object.keys(e)))}return e=null===(e=nt(t))?null:e.stateNode},t.flushSync=function(e,t){if(0!=(48&ku))throw Error(a(187));var n=ku;ku|=1;try{return Wi(99,e.bind(null,t))}finally{ku=n,qi()}},t.hydrate=function(e,t,n){if(!Ul(t))throw Error(a(200));return Wl(null,e,t,!0,n)},t.render=function(e,t,n){if(!Ul(t))throw Error(a(200));return Wl(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!Ul(e))throw Error(a(40));return!!e._reactRootContainer&&(tl((function(){Wl(null,null,e,!1,(function(){e._reactRootContainer=null,e[Cn]=null}))})),!0)},t.unstable_batchedUpdates=el,t.unstable_createPortal=function(e,t){return $l(e,t,2<arguments.length&&void 0!==arguments[2]?arguments[2]:null)},t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!Ul(n))throw Error(a(200));if(null==e||void 0===e._reactInternalFiber)throw Error(a(38));return Wl(e,t,n,!1,r)},t.version="16.14.0"},function(e,t,n){"use strict";e.exports=n(24)},function(e,t,n){"use strict";
/** @license React v0.19.1
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r,i,o,a,u;if("undefined"==typeof window||"function"!=typeof MessageChannel){var l=null,c=null,s=function(){if(null!==l)try{var e=t.unstable_now();l(!0,e),l=null}catch(e){throw setTimeout(s,0),e}},f=Date.now();t.unstable_now=function(){return Date.now()-f},r=function(e){null!==l?setTimeout(r,0,e):(l=e,setTimeout(s,0))},i=function(e,t){c=setTimeout(e,t)},o=function(){clearTimeout(c)},a=function(){return!1},u=t.unstable_forceFrameRate=function(){}}else{var d=window.performance,p=window.Date,m=window.setTimeout,h=window.clearTimeout;if("undefined"!=typeof console){var v=window.cancelAnimationFrame;"function"!=typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"),"function"!=typeof v&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills")}if("object"==typeof d&&"function"==typeof d.now)t.unstable_now=function(){return d.now()};else{var y=p.now();t.unstable_now=function(){return p.now()-y}}var b=!1,g=null,w=-1,x=5,E=0;a=function(){return t.unstable_now()>=E},u=function(){},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing framerates higher than 125 fps is not unsupported"):x=0<e?Math.floor(1e3/e):5};var k=new MessageChannel,S=k.port2;k.port1.onmessage=function(){if(null!==g){var e=t.unstable_now();E=e+x;try{g(!0,e)?S.postMessage(null):(b=!1,g=null)}catch(e){throw S.postMessage(null),e}}else b=!1},r=function(e){g=e,b||(b=!0,S.postMessage(null))},i=function(e,n){w=m((function(){e(t.unstable_now())}),n)},o=function(){h(w),w=-1}}function T(e,t){var n=e.length;e.push(t);e:for(;;){var r=n-1>>>1,i=e[r];if(!(void 0!==i&&0<O(i,t)))break e;e[r]=t,e[n]=i,n=r}}function C(e){return void 0===(e=e[0])?null:e}function A(e){var t=e[0];if(void 0!==t){var n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,i=e.length;r<i;){var o=2*(r+1)-1,a=e[o],u=o+1,l=e[u];if(void 0!==a&&0>O(a,n))void 0!==l&&0>O(l,a)?(e[r]=l,e[u]=n,r=u):(e[r]=a,e[o]=n,r=o);else{if(!(void 0!==l&&0>O(l,n)))break e;e[r]=l,e[u]=n,r=u}}}return t}return null}function O(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}var _=[],P=[],I=1,N=null,R=3,j=!1,B=!1,M=!1;function D(e){for(var t=C(P);null!==t;){if(null===t.callback)A(P);else{if(!(t.startTime<=e))break;A(P),t.sortIndex=t.expirationTime,T(_,t)}t=C(P)}}function z(e){if(M=!1,D(e),!B)if(null!==C(_))B=!0,r(F);else{var t=C(P);null!==t&&i(z,t.startTime-e)}}function F(e,n){B=!1,M&&(M=!1,o()),j=!0;var r=R;try{for(D(n),N=C(_);null!==N&&(!(N.expirationTime>n)||e&&!a());){var u=N.callback;if(null!==u){N.callback=null,R=N.priorityLevel;var l=u(N.expirationTime<=n);n=t.unstable_now(),"function"==typeof l?N.callback=l:N===C(_)&&A(_),D(n)}else A(_);N=C(_)}if(null!==N)var c=!0;else{var s=C(P);null!==s&&i(z,s.startTime-n),c=!1}return c}finally{N=null,R=r,j=!1}}function L(e){switch(e){case 1:return-1;case 2:return 250;case 5:return 1073741823;case 4:return 1e4;default:return 5e3}}var U=u;t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){B||j||(B=!0,r(F))},t.unstable_getCurrentPriorityLevel=function(){return R},t.unstable_getFirstCallbackNode=function(){return C(_)},t.unstable_next=function(e){switch(R){case 1:case 2:case 3:var t=3;break;default:t=R}var n=R;R=t;try{return e()}finally{R=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=U,t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=R;R=e;try{return t()}finally{R=n}},t.unstable_scheduleCallback=function(e,n,a){var u=t.unstable_now();if("object"==typeof a&&null!==a){var l=a.delay;l="number"==typeof l&&0<l?u+l:u,a="number"==typeof a.timeout?a.timeout:L(e)}else a=L(e),l=u;return e={id:I++,callback:n,priorityLevel:e,startTime:l,expirationTime:a=l+a,sortIndex:-1},l>u?(e.sortIndex=l,T(P,e),null===C(_)&&e===C(P)&&(M?o():M=!0,i(z,l-u))):(e.sortIndex=a,T(_,e),B||j||(B=!0,r(F))),e},t.unstable_shouldYield=function(){var e=t.unstable_now();D(e);var n=C(_);return n!==N&&null!==N&&null!==n&&null!==n.callback&&n.startTime<=e&&n.expirationTime<N.expirationTime||a()},t.unstable_wrapCallback=function(e){var t=R;return function(){var n=R;R=t;try{return e.apply(this,arguments)}finally{R=n}}}},function(e,t,n){e.exports=n(26)()},function(e,t,n){"use strict";var r=n(27);function i(){}function o(){}o.resetWarningCache=i,e.exports=function(){function e(e,t,n,i,o,a){if(a!==r){var u=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw u.name="Invariant Violation",u}}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:o,resetWarningCache:i};return n.PropTypes=n,n}},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t,n){"use strict";
/** @license React v16.13.1
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r="function"==typeof Symbol&&Symbol.for,i=r?Symbol.for("react.element"):60103,o=r?Symbol.for("react.portal"):60106,a=r?Symbol.for("react.fragment"):60107,u=r?Symbol.for("react.strict_mode"):60108,l=r?Symbol.for("react.profiler"):60114,c=r?Symbol.for("react.provider"):60109,s=r?Symbol.for("react.context"):60110,f=r?Symbol.for("react.async_mode"):60111,d=r?Symbol.for("react.concurrent_mode"):60111,p=r?Symbol.for("react.forward_ref"):60112,m=r?Symbol.for("react.suspense"):60113,h=r?Symbol.for("react.suspense_list"):60120,v=r?Symbol.for("react.memo"):60115,y=r?Symbol.for("react.lazy"):60116,b=r?Symbol.for("react.block"):60121,g=r?Symbol.for("react.fundamental"):60117,w=r?Symbol.for("react.responder"):60118,x=r?Symbol.for("react.scope"):60119;function E(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case i:switch(e=e.type){case f:case d:case a:case l:case u:case m:return e;default:switch(e=e&&e.$$typeof){case s:case p:case y:case v:case c:return e;default:return t}}case o:return t}}}function k(e){return E(e)===d}t.AsyncMode=f,t.ConcurrentMode=d,t.ContextConsumer=s,t.ContextProvider=c,t.Element=i,t.ForwardRef=p,t.Fragment=a,t.Lazy=y,t.Memo=v,t.Portal=o,t.Profiler=l,t.StrictMode=u,t.Suspense=m,t.isAsyncMode=function(e){return k(e)||E(e)===f},t.isConcurrentMode=k,t.isContextConsumer=function(e){return E(e)===s},t.isContextProvider=function(e){return E(e)===c},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===i},t.isForwardRef=function(e){return E(e)===p},t.isFragment=function(e){return E(e)===a},t.isLazy=function(e){return E(e)===y},t.isMemo=function(e){return E(e)===v},t.isPortal=function(e){return E(e)===o},t.isProfiler=function(e){return E(e)===l},t.isStrictMode=function(e){return E(e)===u},t.isSuspense=function(e){return E(e)===m},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===a||e===d||e===l||e===u||e===m||e===h||"object"==typeof e&&null!==e&&(e.$$typeof===y||e.$$typeof===v||e.$$typeof===c||e.$$typeof===s||e.$$typeof===p||e.$$typeof===g||e.$$typeof===w||e.$$typeof===x||e.$$typeof===b)},t.typeOf=E},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t){e.exports=function(e){if(!e.webpackPolyfill){var t=Object.create(e);t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),Object.defineProperty(t,"exports",{enumerable:!0}),t.webpackPolyfill=1}return t}},function(e,t,n){e.exports=n(32)},function(e,t,n){"use strict";var r=n(1),i=n(10),o=n(33),a=n(16);function u(e){var t=new o(e),n=i(o.prototype.request,t);return r.extend(n,o.prototype,t),r.extend(n,t),n}var l=u(n(13));l.Axios=o,l.create=function(e){return u(a(l.defaults,e))},l.Cancel=n(17),l.CancelToken=n(47),l.isCancel=n(12),l.all=function(e){return Promise.all(e)},l.spread=n(48),e.exports=l,e.exports.default=l},function(e,t,n){"use strict";var r=n(1),i=n(11),o=n(34),a=n(35),u=n(16);function l(e){this.defaults=e,this.interceptors={request:new o,response:new o}}l.prototype.request=function(e){"string"==typeof e?(e=arguments[1]||{}).url=arguments[0]:e=e||{},(e=u(this.defaults,e)).method?e.method=e.method.toLowerCase():this.defaults.method?e.method=this.defaults.method.toLowerCase():e.method="get";var t=[a,void 0],n=Promise.resolve(e);for(this.interceptors.request.forEach((function(e){t.unshift(e.fulfilled,e.rejected)})),this.interceptors.response.forEach((function(e){t.push(e.fulfilled,e.rejected)}));t.length;)n=n.then(t.shift(),t.shift());return n},l.prototype.getUri=function(e){return e=u(this.defaults,e),i(e.url,e.params,e.paramsSerializer).replace(/^\?/,"")},r.forEach(["delete","get","head","options"],(function(e){l.prototype[e]=function(t,n){return this.request(u(n||{},{method:e,url:t,data:(n||{}).data}))}})),r.forEach(["post","put","patch"],(function(e){l.prototype[e]=function(t,n,r){return this.request(u(r||{},{method:e,url:t,data:n}))}})),e.exports=l},function(e,t,n){"use strict";var r=n(1);function i(){this.handlers=[]}i.prototype.use=function(e,t){return this.handlers.push({fulfilled:e,rejected:t}),this.handlers.length-1},i.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},i.prototype.forEach=function(e){r.forEach(this.handlers,(function(t){null!==t&&e(t)}))},e.exports=i},function(e,t,n){"use strict";var r=n(1),i=n(36),o=n(12),a=n(13);function u(e){e.cancelToken&&e.cancelToken.throwIfRequested()}e.exports=function(e){return u(e),e.headers=e.headers||{},e.data=i(e.data,e.headers,e.transformRequest),e.headers=r.merge(e.headers.common||{},e.headers[e.method]||{},e.headers),r.forEach(["delete","get","head","post","put","patch","common"],(function(t){delete e.headers[t]})),(e.adapter||a.adapter)(e).then((function(t){return u(e),t.data=i(t.data,t.headers,e.transformResponse),t}),(function(t){return o(t)||(u(e),t&&t.response&&(t.response.data=i(t.response.data,t.response.headers,e.transformResponse))),Promise.reject(t)}))}},function(e,t,n){"use strict";var r=n(1);e.exports=function(e,t,n){return r.forEach(n,(function(n){e=n(e,t)})),e}},function(e,t){var n,r,i=e.exports={};function o(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function u(e){if(n===setTimeout)return setTimeout(e,0);if((n===o||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:o}catch(e){n=o}try{r="function"==typeof clearTimeout?clearTimeout:a}catch(e){r=a}}();var l,c=[],s=!1,f=-1;function d(){s&&l&&(s=!1,l.length?c=l.concat(c):f=-1,c.length&&p())}function p(){if(!s){var e=u(d);s=!0;for(var t=c.length;t;){for(l=c,c=[];++f<t;)l&&l[f].run();f=-1,t=c.length}l=null,s=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===a||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function m(e,t){this.fun=e,this.array=t}function h(){}i.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];c.push(new m(e,t)),1!==c.length||s||u(p)},m.prototype.run=function(){this.fun.apply(null,this.array)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.versions={},i.on=h,i.addListener=h,i.once=h,i.off=h,i.removeListener=h,i.removeAllListeners=h,i.emit=h,i.prependListener=h,i.prependOnceListener=h,i.listeners=function(e){return[]},i.binding=function(e){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(e){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}},function(e,t,n){"use strict";var r=n(1);e.exports=function(e,t){r.forEach(e,(function(n,r){r!==t&&r.toUpperCase()===t.toUpperCase()&&(e[t]=n,delete e[r])}))}},function(e,t,n){"use strict";var r=n(15);e.exports=function(e,t,n){var i=n.config.validateStatus;n.status&&i&&!i(n.status)?t(r("Request failed with status code "+n.status,n.config,null,n.request,n)):e(n)}},function(e,t,n){"use strict";e.exports=function(e,t,n,r,i){return e.config=t,n&&(e.code=n),e.request=r,e.response=i,e.isAxiosError=!0,e.toJSON=function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code}},e}},function(e,t,n){"use strict";var r=n(1);e.exports=r.isStandardBrowserEnv()?{write:function(e,t,n,i,o,a){var u=[];u.push(e+"="+encodeURIComponent(t)),r.isNumber(n)&&u.push("expires="+new Date(n).toGMTString()),r.isString(i)&&u.push("path="+i),r.isString(o)&&u.push("domain="+o),!0===a&&u.push("secure"),document.cookie=u.join("; ")},read:function(e){var t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},function(e,t,n){"use strict";var r=n(43),i=n(44);e.exports=function(e,t){return e&&!r(t)?i(e,t):t}},function(e,t,n){"use strict";e.exports=function(e){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(e)}},function(e,t,n){"use strict";e.exports=function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}},function(e,t,n){"use strict";var r=n(1),i=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];e.exports=function(e){var t,n,o,a={};return e?(r.forEach(e.split("\n"),(function(e){if(o=e.indexOf(":"),t=r.trim(e.substr(0,o)).toLowerCase(),n=r.trim(e.substr(o+1)),t){if(a[t]&&i.indexOf(t)>=0)return;a[t]="set-cookie"===t?(a[t]?a[t]:[]).concat([n]):a[t]?a[t]+", "+n:n}})),a):a}},function(e,t,n){"use strict";var r=n(1);e.exports=r.isStandardBrowserEnv()?function(){var e,t=/(msie|trident)/i.test(navigator.userAgent),n=document.createElement("a");function i(e){var r=e;return t&&(n.setAttribute("href",r),r=n.href),n.setAttribute("href",r),{href:n.href,protocol:n.protocol?n.protocol.replace(/:$/,""):"",host:n.host,search:n.search?n.search.replace(/^\?/,""):"",hash:n.hash?n.hash.replace(/^#/,""):"",hostname:n.hostname,port:n.port,pathname:"/"===n.pathname.charAt(0)?n.pathname:"/"+n.pathname}}return e=i(window.location.href),function(t){var n=r.isString(t)?i(t):t;return n.protocol===e.protocol&&n.host===e.host}}():function(){return!0}},function(e,t,n){"use strict";var r=n(17);function i(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var t;this.promise=new Promise((function(e){t=e}));var n=this;e((function(e){n.reason||(n.reason=new r(e),t(n.reason))}))}i.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},i.source=function(){var e;return{token:new i((function(t){e=t})),cancel:e}},e.exports=i},function(e,t,n){"use strict";e.exports=function(e){return function(t){return e.apply(null,t)}}},function(e,t){e.exports=function(e,t,n,r){var i=new Blob(void 0!==r?[r,e]:[e],{type:n||"application/octet-stream"});if(void 0!==window.navigator.msSaveBlob)window.navigator.msSaveBlob(i,t);else{var o=window.URL&&window.URL.createObjectURL?window.URL.createObjectURL(i):window.webkitURL.createObjectURL(i),a=document.createElement("a");a.style.display="none",a.href=o,a.setAttribute("download",t),void 0===a.download&&a.setAttribute("target","_blank"),document.body.appendChild(a),a.click(),setTimeout((function(){document.body.removeChild(a),window.URL.revokeObjectURL(o)}),200)}}},function(e,t,n){"use strict";n.r(t);var r=n(2),i=n.n(r)()(!0);i.push([e.i,"/* refactor to flex */\n.scrubber-container {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  flex-shrink: 1;\n}\n\n.scrubberFrames-container {\n  position: relative;\n  width: 100%;\n}\n\n.scrubberSlider-container {\n  width: 100%; /* Width of the outside container */\n  margin-top: 8px;\n  margin-bottom: 8px;\n}\n\n.scrubberSlider {\n  -webkit-appearance: none;\n  width: 100%;\n  height: 20px;\n  border-radius: 5px;  \n  background: #98caff;\n  outline: none;\n  opacity: 0.7;\n  -webkit-transition: .2s;\n  transition: opacity .2s;\n}\n\n.scrubberSlider::-webkit-slider-thumb {\n  -webkit-appearance: none;\n  appearance: none;\n  width: 40px;\n  height: 40px;\n  border-radius: 5px; \n  border-style: inset;\n  border-color: #1586ff;;\n  background: #ffffff;\n  cursor: pointer;  \n  box-shadow: 2px 2px 2px 1px rgba(0, 0, 0, 0.3);\n}\n\n.scrubberSlider::-moz-range-thumb {\n  width: 40px;\n  height: 40px;\n  border-radius: 5px; \n  border-style: inset;\n  border-color: #1586ff;;\n  background: #ffffff;\n  cursor: pointer;\n  box-shadow: 2px 2px 2px 1px rgba(0, 0, 0, 0.3);\n}\n","",{version:3,sources:["webpack://src/features/mosaicImage/scrubberStyles.css"],names:[],mappings:"AAAA,qBAAqB;AACrB;EACE,aAAa;EACb,sBAAsB;EACtB,mBAAmB;EACnB,cAAc;AAChB;;AAEA;EACE,kBAAkB;EAClB,WAAW;AACb;;AAEA;EACE,WAAW,EAAE,mCAAmC;EAChD,eAAe;EACf,kBAAkB;AACpB;;AAEA;EACE,wBAAwB;EACxB,WAAW;EACX,YAAY;EACZ,kBAAkB;EAClB,mBAAmB;EACnB,aAAa;EACb,YAAY;EACZ,uBAAuB;EACvB,uBAAuB;AACzB;;AAEA;EACE,wBAAwB;EACxB,gBAAgB;EAChB,WAAW;EACX,YAAY;EACZ,kBAAkB;EAClB,mBAAmB;EACnB,qBAAqB;EACrB,mBAAmB;EACnB,eAAe;EACf,8CAA8C;AAChD;;AAEA;EACE,WAAW;EACX,YAAY;EACZ,kBAAkB;EAClB,mBAAmB;EACnB,qBAAqB;EACrB,mBAAmB;EACnB,eAAe;EACf,8CAA8C;AAChD",sourcesContent:["/* refactor to flex */\n.scrubber-container {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  flex-shrink: 1;\n}\n\n.scrubberFrames-container {\n  position: relative;\n  width: 100%;\n}\n\n.scrubberSlider-container {\n  width: 100%; /* Width of the outside container */\n  margin-top: 8px;\n  margin-bottom: 8px;\n}\n\n.scrubberSlider {\n  -webkit-appearance: none;\n  width: 100%;\n  height: 20px;\n  border-radius: 5px;  \n  background: #98caff;\n  outline: none;\n  opacity: 0.7;\n  -webkit-transition: .2s;\n  transition: opacity .2s;\n}\n\n.scrubberSlider::-webkit-slider-thumb {\n  -webkit-appearance: none;\n  appearance: none;\n  width: 40px;\n  height: 40px;\n  border-radius: 5px; \n  border-style: inset;\n  border-color: #1586ff;;\n  background: #ffffff;\n  cursor: pointer;  \n  box-shadow: 2px 2px 2px 1px rgba(0, 0, 0, 0.3);\n}\n\n.scrubberSlider::-moz-range-thumb {\n  width: 40px;\n  height: 40px;\n  border-radius: 5px; \n  border-style: inset;\n  border-color: #1586ff;;\n  background: #ffffff;\n  cursor: pointer;\n  box-shadow: 2px 2px 2px 1px rgba(0, 0, 0, 0.3);\n}\n"],sourceRoot:""}]),t.default=i},function(e,t,n){"use strict";n.r(t);var r=n(2),i=n.n(r)()(!0);i.push([e.i,".mosaicTiles-canvasContainer {\n  position: relative;\n  top: -480px;\n}\n\n.mosaicSelector-container {\n  display: flex;\n  flex-direction: row;\n  justify-items: center;\n  justify-content: space-evenly;\n  width: 100%;\n}\n\n.mosaicSelector-button-default {\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  filter: grayscale(100%); \n}\n\n.mosaicSelector-button-hilite {\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  filter: saturate(2); \n}\n","",{version:3,sources:["webpack://src/features/mosaicVideo/mosaicStyles.css"],names:[],mappings:"AAAA;EACE,kBAAkB;EAClB,WAAW;AACb;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,qBAAqB;EACrB,6BAA6B;EAC7B,WAAW;AACb;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,mBAAmB;EACnB,uBAAuB;AACzB;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,mBAAmB;EACnB,mBAAmB;AACrB",sourcesContent:[".mosaicTiles-canvasContainer {\n  position: relative;\n  top: -480px;\n}\n\n.mosaicSelector-container {\n  display: flex;\n  flex-direction: row;\n  justify-items: center;\n  justify-content: space-evenly;\n  width: 100%;\n}\n\n.mosaicSelector-button-default {\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  filter: grayscale(100%); \n}\n\n.mosaicSelector-button-hilite {\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  filter: saturate(2); \n}\n"],sourceRoot:""}]),t.default=i},function(e,t,n){var r=n(5),i=n(53);"string"==typeof(i=i.__esModule?i.default:i)&&(i=[[e.i,i,""]]);var o={insert:"head",singleton:!1};r(i,o);e.exports=i.locals||{}},function(e,t,n){"use strict";n.r(t);var r=n(2),i=n.n(r)()(!0);i.push([e.i,".app-container {\n  display: grid;\n  grid-template-rows: 600px, 100px;\n  grid-template-columns: 1fr;\n  border-style: dashed;\n  border-color: aquamarine;\n  border-width: 2px;\n}\n\n.upload-video-container {\n  display: grid;\n  grid-template-rows: 600px;  \n  border-style: dashed;\n  border-color: rgb(228, 180, 22);\n  border-width: 2px;\n}\n\n.edit-mosaic-container {\n  display: grid;\n  grid-template-rows: 480px, 48px, 72px;\n  border-style: dashed;\n  border-color: rgb(159, 29, 148);\n  border-width: 2px;\n}","",{version:3,sources:["webpack://src/app/app.css"],names:[],mappings:"AAAA;EACE,aAAa;EACb,gCAAgC;EAChC,0BAA0B;EAC1B,oBAAoB;EACpB,wBAAwB;EACxB,iBAAiB;AACnB;;AAEA;EACE,aAAa;EACb,yBAAyB;EACzB,oBAAoB;EACpB,+BAA+B;EAC/B,iBAAiB;AACnB;;AAEA;EACE,aAAa;EACb,qCAAqC;EACrC,oBAAoB;EACpB,+BAA+B;EAC/B,iBAAiB;AACnB",sourcesContent:[".app-container {\n  display: grid;\n  grid-template-rows: 600px, 100px;\n  grid-template-columns: 1fr;\n  border-style: dashed;\n  border-color: aquamarine;\n  border-width: 2px;\n}\n\n.upload-video-container {\n  display: grid;\n  grid-template-rows: 600px;  \n  border-style: dashed;\n  border-color: rgb(228, 180, 22);\n  border-width: 2px;\n}\n\n.edit-mosaic-container {\n  display: grid;\n  grid-template-rows: 480px, 48px, 72px;\n  border-style: dashed;\n  border-color: rgb(159, 29, 148);\n  border-width: 2px;\n}"],sourceRoot:""}]),t.default=i},function(e,t,n){"use strict";n.r(t);var r=n(0),i=n.n(r),o=n(3),a=n.n(o),u=(n(25),i.a.createContext(null));var l=function(e){e()},c={notify:function(){}};function s(){var e=l,t=null,n=null;return{clear:function(){t=null,n=null},notify:function(){e((function(){for(var e=t;e;)e.callback(),e=e.next}))},get:function(){for(var e=[],n=t;n;)e.push(n),n=n.next;return e},subscribe:function(e){var r=!0,i=n={callback:e,next:null,prev:n};return i.prev?i.prev.next=i:t=i,function(){r&&null!==t&&(r=!1,i.next?i.next.prev=i.prev:n=i.prev,i.prev?i.prev.next=i.next:t=i.next)}}}}var f=function(){function e(e,t){this.store=e,this.parentSub=t,this.unsubscribe=null,this.listeners=c,this.handleChangeWrapper=this.handleChangeWrapper.bind(this)}var t=e.prototype;return t.addNestedSub=function(e){return this.trySubscribe(),this.listeners.subscribe(e)},t.notifyNestedSubs=function(){this.listeners.notify()},t.handleChangeWrapper=function(){this.onStateChange&&this.onStateChange()},t.isSubscribed=function(){return Boolean(this.unsubscribe)},t.trySubscribe=function(){this.unsubscribe||(this.unsubscribe=this.parentSub?this.parentSub.addNestedSub(this.handleChangeWrapper):this.store.subscribe(this.handleChangeWrapper),this.listeners=s())},t.tryUnsubscribe=function(){this.unsubscribe&&(this.unsubscribe(),this.unsubscribe=null,this.listeners.clear(),this.listeners=c)},e}();var d=function(e){var t=e.store,n=e.context,o=e.children,a=Object(r.useMemo)((function(){var e=new f(t);return e.onStateChange=e.notifyNestedSubs,{store:t,subscription:e}}),[t]),l=Object(r.useMemo)((function(){return t.getState()}),[t]);Object(r.useEffect)((function(){var e=a.subscription;return e.trySubscribe(),l!==t.getState()&&e.notifyNestedSubs(),function(){e.tryUnsubscribe(),e.onStateChange=null}}),[a,l]);var c=n||u;return i.a.createElement(c.Provider,{value:a},o)};n(7),n(6);var p="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement?r.useLayoutEffect:r.useEffect;var m=n(8),h=function(){return Math.random().toString(36).substring(7).split("").join(".")},v={INIT:"@@redux/INIT"+h(),REPLACE:"@@redux/REPLACE"+h(),PROBE_UNKNOWN_ACTION:function(){return"@@redux/PROBE_UNKNOWN_ACTION"+h()}};function y(e){if("object"!=typeof e||null===e)return!1;for(var t=e;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t}function b(e,t,n){var r;if("function"==typeof t&&"function"==typeof n||"function"==typeof n&&"function"==typeof arguments[3])throw new Error("It looks like you are passing several store enhancers to createStore(). This is not supported. Instead, compose them together to a single function.");if("function"==typeof t&&void 0===n&&(n=t,t=void 0),void 0!==n){if("function"!=typeof n)throw new Error("Expected the enhancer to be a function.");return n(b)(e,t)}if("function"!=typeof e)throw new Error("Expected the reducer to be a function.");var i=e,o=t,a=[],u=a,l=!1;function c(){u===a&&(u=a.slice())}function s(){if(l)throw new Error("You may not call store.getState() while the reducer is executing. The reducer has already received the state as an argument. Pass it down from the top reducer instead of reading it from the store.");return o}function f(e){if("function"!=typeof e)throw new Error("Expected the listener to be a function.");if(l)throw new Error("You may not call store.subscribe() while the reducer is executing. If you would like to be notified after the store has been updated, subscribe from a component and invoke store.getState() in the callback to access the latest state. See https://redux.js.org/api-reference/store#subscribelistener for more details.");var t=!0;return c(),u.push(e),function(){if(t){if(l)throw new Error("You may not unsubscribe from a store listener while the reducer is executing. See https://redux.js.org/api-reference/store#subscribelistener for more details.");t=!1,c();var n=u.indexOf(e);u.splice(n,1),a=null}}}function d(e){if(!y(e))throw new Error("Actions must be plain objects. Use custom middleware for async actions.");if(void 0===e.type)throw new Error('Actions may not have an undefined "type" property. Have you misspelled a constant?');if(l)throw new Error("Reducers may not dispatch actions.");try{l=!0,o=i(o,e)}finally{l=!1}for(var t=a=u,n=0;n<t.length;n++){(0,t[n])()}return e}function p(e){if("function"!=typeof e)throw new Error("Expected the nextReducer to be a function.");i=e,d({type:v.REPLACE})}function h(){var e,t=f;return(e={subscribe:function(e){if("object"!=typeof e||null===e)throw new TypeError("Expected the observer to be an object.");function n(){e.next&&e.next(s())}return n(),{unsubscribe:t(n)}}})[m.a]=function(){return this},e}return d({type:v.INIT}),(r={dispatch:d,subscribe:f,getState:s,replaceReducer:p})[m.a]=h,r}function g(e,t){var n=t&&t.type;return"Given "+(n&&'action "'+String(n)+'"'||"an action")+', reducer "'+e+'" returned undefined. To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined.'}function w(e){for(var t=Object.keys(e),n={},r=0;r<t.length;r++){var i=t[r];0,"function"==typeof e[i]&&(n[i]=e[i])}var o,a=Object.keys(n);try{!function(e){Object.keys(e).forEach((function(t){var n=e[t];if(void 0===n(void 0,{type:v.INIT}))throw new Error('Reducer "'+t+"\" returned undefined during initialization. If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don't want to set a value for this reducer, you can use null instead of undefined.");if(void 0===n(void 0,{type:v.PROBE_UNKNOWN_ACTION()}))throw new Error('Reducer "'+t+"\" returned undefined when probed with a random type. Don't try to handle "+v.INIT+' or other actions in "redux/*" namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined, but can be null.')}))}(n)}catch(e){o=e}return function(e,t){if(void 0===e&&(e={}),o)throw o;for(var r=!1,i={},u=0;u<a.length;u++){var l=a[u],c=n[l],s=e[l],f=c(s,t);if(void 0===f){var d=g(l,t);throw new Error(d)}i[l]=f,r=r||f!==s}return(r=r||a.length!==Object.keys(e).length)?i:e}}function x(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function E(e,t){var n=Object.keys(e);return Object.getOwnPropertySymbols&&n.push.apply(n,Object.getOwnPropertySymbols(e)),t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n}function k(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?E(n,!0).forEach((function(t){x(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):E(n).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function S(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return 0===t.length?function(e){return e}:1===t.length?t[0]:t.reduce((function(e,t){return function(){return e(t.apply(void 0,arguments))}}))}function T(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return function(e){return function(){var n=e.apply(void 0,arguments),r=function(){throw new Error("Dispatching while constructing your middleware is not allowed. Other middleware would not be applied to this dispatch.")},i={getState:n.getState,dispatch:function(){return r.apply(void 0,arguments)}},o=t.map((function(e){return e(i)}));return k({},n,{dispatch:r=S.apply(void 0,o)(n.dispatch)})}}}function C(){return Object(r.useContext)(u)}function A(e){void 0===e&&(e=u);var t=e===u?C:function(){return Object(r.useContext)(e)};return function(){return t().store}}var O=A();function _(e){void 0===e&&(e=u);var t=e===u?O:A(e);return function(){return t().dispatch}}var P=_(),I=function(e,t){return e===t};function N(e){void 0===e&&(e=u);var t=e===u?C:function(){return Object(r.useContext)(e)};return function(e,n){void 0===n&&(n=I);var i=t(),o=function(e,t,n,i){var o,a=Object(r.useReducer)((function(e){return e+1}),0)[1],u=Object(r.useMemo)((function(){return new f(n,i)}),[n,i]),l=Object(r.useRef)(),c=Object(r.useRef)(),s=Object(r.useRef)(),d=Object(r.useRef)(),m=n.getState();try{o=e!==c.current||m!==s.current||l.current?e(m):d.current}catch(e){throw l.current&&(e.message+="\nThe error may be correlated with this previous error:\n"+l.current.stack+"\n\n"),e}return p((function(){c.current=e,s.current=m,d.current=o,l.current=void 0})),p((function(){function e(){try{var e=c.current(n.getState());if(t(e,d.current))return;d.current=e}catch(e){l.current=e}a()}return u.onStateChange=e,u.trySubscribe(),e(),function(){return u.tryUnsubscribe()}}),[n,u]),o}(e,n,i.store,i.subscription);return Object(r.useDebugValue)(o),o}}var R,j=N();function B(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];throw Error("[Immer] minified error nr: "+e+(n.length?" "+n.join(","):"")+". Find the full error at: https://bit.ly/3cXEKWf")}function M(e){return!!e&&!!e[Te]}function D(e){return!!e&&(function(e){if(!e||"object"!=typeof e)return!1;var t=Object.getPrototypeOf(e);return!t||t===Object.prototype}(e)||Array.isArray(e)||!!e[Se]||!!e.constructor[Se]||$(e)||q(e))}function z(e,t,n){void 0===n&&(n=!1),0===F(e)?(n?Object.keys:Ce)(e).forEach((function(r){n&&"symbol"==typeof r||t(r,e[r],e)})):e.forEach((function(n,r){return t(r,n,e)}))}function F(e){var t=e[Te];return t?t.i>3?t.i-4:t.i:Array.isArray(e)?1:$(e)?2:q(e)?3:0}function L(e,t){return 2===F(e)?e.has(t):Object.prototype.hasOwnProperty.call(e,t)}function U(e,t){return 2===F(e)?e.get(t):e[t]}function W(e,t,n){var r=F(e);2===r?e.set(t,n):3===r?(e.delete(t),e.add(n)):e[t]=n}function V(e,t){return e===t?0!==e||1/e==1/t:e!=e&&t!=t}function $(e){return we&&e instanceof Map}function q(e){return xe&&e instanceof Set}function H(e){return e.o||e.t}function Q(e){if(Array.isArray(e))return Array.prototype.slice.call(e);var t=Ae(e);delete t[Te];for(var n=Ce(t),r=0;r<n.length;r++){var i=n[r],o=t[i];!1===o.writable&&(o.writable=!0,o.configurable=!0),(o.get||o.set)&&(t[i]={configurable:!0,writable:!0,enumerable:o.enumerable,value:e[i]})}return Object.create(Object.getPrototypeOf(e),t)}function K(e,t){X(e)||M(e)||!D(e)||(F(e)>1&&(e.set=e.add=e.clear=e.delete=Y),Object.freeze(e),t&&z(e,(function(e,t){return K(t,!0)}),!0))}function Y(){B(2)}function X(e){return null==e||"object"!=typeof e||Object.isFrozen(e)}function G(e){var t=Oe[e];return t||B(19,e),t}function J(e,t){Oe[e]=t}function Z(){return be}function ee(e,t){t&&(G("Patches"),e.u=[],e.s=[],e.v=t)}function te(e){ne(e),e.p.forEach(ie),e.p=null}function ne(e){e===be&&(be=e.l)}function re(e){return be={p:[],l:be,h:e,m:!0,_:0}}function ie(e){var t=e[Te];0===t.i||1===t.i?t.j():t.g=!0}function oe(e,t){t._=t.p.length;var n=t.p[0],r=void 0!==e&&e!==n;return t.h.O||G("ES5").S(t,e,r),r?(n[Te].P&&(te(t),B(4)),D(e)&&(e=ae(t,e),t.l||le(t,e)),t.u&&G("Patches").M(n[Te],e,t.u,t.s)):e=ae(t,n,[]),te(t),t.u&&t.v(t.u,t.s),e!==ke?e:void 0}function ae(e,t,n){if(X(t))return t;var r=t[Te];if(!r)return z(t,(function(i,o){return ue(e,r,t,i,o,n)}),!0),t;if(r.A!==e)return t;if(!r.P)return le(e,r.t,!0),r.t;if(!r.I){r.I=!0,r.A._--;var i=4===r.i||5===r.i?r.o=Q(r.k):r.o;z(3===r.i?new Set(i):i,(function(t,o){return ue(e,r,i,t,o,n)})),le(e,i,!1),n&&e.u&&G("Patches").R(r,n,e.u,e.s)}return r.o}function ue(e,t,n,r,i,o){if(M(i)){var a=ae(e,i,o&&t&&3!==t.i&&!L(t.D,r)?o.concat(r):void 0);if(W(n,r,a),!M(a))return;e.m=!1}if(D(i)&&!X(i)){if(!e.h.N&&e._<1)return;ae(e,i),t&&t.A.l||le(e,i)}}function le(e,t,n){void 0===n&&(n=!1),e.h.N&&e.m&&K(t,n)}function ce(e,t){var n=e[Te];return(n?H(n):e)[t]}function se(e,t){if(t in e)for(var n=Object.getPrototypeOf(e);n;){var r=Object.getOwnPropertyDescriptor(n,t);if(r)return r;n=Object.getPrototypeOf(n)}}function fe(e){e.P||(e.P=!0,e.l&&fe(e.l))}function de(e){e.o||(e.o=Q(e.t))}function pe(e,t,n){var r=$(t)?G("MapSet").T(t,n):q(t)?G("MapSet").F(t,n):e.O?function(e,t){var n=Array.isArray(e),r={i:n?1:0,A:t?t.A:Z(),P:!1,I:!1,D:{},l:t,t:e,k:null,o:null,j:null,C:!1},i=r,o=_e;n&&(i=[r],o=Pe);var a=Proxy.revocable(i,o),u=a.revoke,l=a.proxy;return r.k=l,r.j=u,l}(t,n):G("ES5").J(t,n);return(n?n.A:Z()).p.push(r),r}function me(e){return M(e)||B(22,e),function e(t){if(!D(t))return t;var n,r=t[Te],i=F(t);if(r){if(!r.P&&(r.i<4||!G("ES5").K(r)))return r.t;r.I=!0,n=he(t,i),r.I=!1}else n=he(t,i);return z(n,(function(t,i){r&&U(r.t,t)===i||W(n,t,e(i))})),3===i?new Set(n):n}(e)}function he(e,t){switch(t){case 2:return new Map(e);case 3:return Array.from(e)}return Q(e)}function ve(){function e(e,t){var n=i[e];return n?n.enumerable=t:i[e]=n={configurable:!0,enumerable:t,get:function(){var t=this[Te];return _e.get(t,e)},set:function(t){var n=this[Te];_e.set(n,e,t)}},n}function t(e){for(var t=e.length-1;t>=0;t--){var i=e[t][Te];if(!i.P)switch(i.i){case 5:r(i)&&fe(i);break;case 4:n(i)&&fe(i)}}}function n(e){for(var t=e.t,n=e.k,r=Ce(n),i=r.length-1;i>=0;i--){var o=r[i];if(o!==Te){var a=t[o];if(void 0===a&&!L(t,o))return!0;var u=n[o],l=u&&u[Te];if(l?l.t!==a:!V(u,a))return!0}}var c=!!t[Te];return r.length!==Ce(t).length+(c?0:1)}function r(e){var t=e.k;if(t.length!==e.t.length)return!0;var n=Object.getOwnPropertyDescriptor(t,t.length-1);return!(!n||n.get)}var i={};J("ES5",{J:function(t,n){var r=Array.isArray(t),i=function(t,n){if(t){for(var r=Array(n.length),i=0;i<n.length;i++)Object.defineProperty(r,""+i,e(i,!0));return r}var o=Ae(n);delete o[Te];for(var a=Ce(o),u=0;u<a.length;u++){var l=a[u];o[l]=e(l,t||!!o[l].enumerable)}return Object.create(Object.getPrototypeOf(n),o)}(r,t),o={i:r?5:4,A:n?n.A:Z(),P:!1,I:!1,D:{},l:n,t:t,k:i,o:null,g:!1,C:!1};return Object.defineProperty(i,Te,{value:o,writable:!0}),i},S:function(e,n,i){i?M(n)&&n[Te].A===e&&t(e.p):(e.u&&function e(t){if(t&&"object"==typeof t){var n=t[Te];if(n){var i=n.t,o=n.k,a=n.D,u=n.i;if(4===u)z(o,(function(t){t!==Te&&(void 0!==i[t]||L(i,t)?a[t]||e(o[t]):(a[t]=!0,fe(n)))})),z(i,(function(e){void 0!==o[e]||L(o,e)||(a[e]=!1,fe(n))}));else if(5===u){if(r(n)&&(fe(n),a.length=!0),o.length<i.length)for(var l=o.length;l<i.length;l++)a[l]=!1;else for(var c=i.length;c<o.length;c++)a[c]=!0;for(var s=Math.min(o.length,i.length),f=0;f<s;f++)void 0===a[f]&&e(o[f])}}}}(e.p[0]),t(e.p))},K:function(e){return 4===e.i?n(e):r(e)}})}R=o.unstable_batchedUpdates,l=R;var ye,be,ge="undefined"!=typeof Symbol&&"symbol"==typeof Symbol("x"),we="undefined"!=typeof Map,xe="undefined"!=typeof Set,Ee="undefined"!=typeof Proxy&&void 0!==Proxy.revocable&&"undefined"!=typeof Reflect,ke=ge?Symbol.for("immer-nothing"):((ye={})["immer-nothing"]=!0,ye),Se=ge?Symbol.for("immer-draftable"):"__$immer_draftable",Te=ge?Symbol.for("immer-state"):"__$immer_state",Ce=("undefined"!=typeof Symbol&&Symbol.iterator,"undefined"!=typeof Reflect&&Reflect.ownKeys?Reflect.ownKeys:void 0!==Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:Object.getOwnPropertyNames),Ae=Object.getOwnPropertyDescriptors||function(e){var t={};return Ce(e).forEach((function(n){t[n]=Object.getOwnPropertyDescriptor(e,n)})),t},Oe={},_e={get:function(e,t){if(t===Te)return e;var n=H(e);if(!L(n,t))return function(e,t,n){var r,i=se(t,n);return i?"value"in i?i.value:null===(r=i.get)||void 0===r?void 0:r.call(e.k):void 0}(e,n,t);var r=n[t];return e.I||!D(r)?r:r===ce(e.t,t)?(de(e),e.o[t]=pe(e.A.h,r,e)):r},has:function(e,t){return t in H(e)},ownKeys:function(e){return Reflect.ownKeys(H(e))},set:function(e,t,n){var r=se(H(e),t);if(null==r?void 0:r.set)return r.set.call(e.k,n),!0;if(!e.P){var i=ce(H(e),t),o=null==i?void 0:i[Te];if(o&&o.t===n)return e.o[t]=n,e.D[t]=!1,!0;if(V(n,i)&&(void 0!==n||L(e.t,t)))return!0;de(e),fe(e)}return e.o[t]=n,e.D[t]=!0,!0},deleteProperty:function(e,t){return void 0!==ce(e.t,t)||t in e.t?(e.D[t]=!1,de(e),fe(e)):delete e.D[t],e.o&&delete e.o[t],!0},getOwnPropertyDescriptor:function(e,t){var n=H(e),r=Reflect.getOwnPropertyDescriptor(n,t);return r?{writable:!0,configurable:1!==e.i||"length"!==t,enumerable:r.enumerable,value:n[t]}:r},defineProperty:function(){B(11)},getPrototypeOf:function(e){return Object.getPrototypeOf(e.t)},setPrototypeOf:function(){B(12)}},Pe={};z(_e,(function(e,t){Pe[e]=function(){return arguments[0]=arguments[0][0],t.apply(this,arguments)}})),Pe.deleteProperty=function(e,t){return _e.deleteProperty.call(this,e[0],t)},Pe.set=function(e,t,n){return _e.set.call(this,e[0],t,n,e[0])};var Ie=new(function(){function e(e){this.O=Ee,this.N=!1,"boolean"==typeof(null==e?void 0:e.useProxies)&&this.setUseProxies(e.useProxies),"boolean"==typeof(null==e?void 0:e.autoFreeze)&&this.setAutoFreeze(e.autoFreeze),this.produce=this.produce.bind(this),this.produceWithPatches=this.produceWithPatches.bind(this)}var t=e.prototype;return t.produce=function(e,t,n){if("function"==typeof e&&"function"!=typeof t){var r=t;t=e;var i=this;return function(e){var n=this;void 0===e&&(e=r);for(var o=arguments.length,a=Array(o>1?o-1:0),u=1;u<o;u++)a[u-1]=arguments[u];return i.produce(e,(function(e){var r;return(r=t).call.apply(r,[n,e].concat(a))}))}}var o;if("function"!=typeof t&&B(6),void 0!==n&&"function"!=typeof n&&B(7),D(e)){var a=re(this),u=pe(this,e,void 0),l=!0;try{o=t(u),l=!1}finally{l?te(a):ne(a)}return"undefined"!=typeof Promise&&o instanceof Promise?o.then((function(e){return ee(a,n),oe(e,a)}),(function(e){throw te(a),e})):(ee(a,n),oe(o,a))}if(!e||"object"!=typeof e){if((o=t(e))===ke)return;return void 0===o&&(o=e),this.N&&K(o,!0),o}B(21,e)},t.produceWithPatches=function(e,t){var n,r,i=this;return"function"==typeof e?function(t){for(var n=arguments.length,r=Array(n>1?n-1:0),o=1;o<n;o++)r[o-1]=arguments[o];return i.produceWithPatches(t,(function(t){return e.apply(void 0,[t].concat(r))}))}:[this.produce(e,t,(function(e,t){n=e,r=t})),n,r]},t.createDraft=function(e){D(e)||B(8),M(e)&&(e=me(e));var t=re(this),n=pe(this,e,void 0);return n[Te].C=!0,ne(t),n},t.finishDraft=function(e,t){var n=(e&&e[Te]).A;return ee(n,t),oe(void 0,n)},t.setAutoFreeze=function(e){this.N=e},t.setUseProxies=function(e){e&&!Ee&&B(20),this.O=e},t.applyPatches=function(e,t){var n;for(n=t.length-1;n>=0;n--){var r=t[n];if(0===r.path.length&&"replace"===r.op){e=r.value;break}}var i=G("Patches").$;return M(e)?i(e,t):this.produce(e,(function(e){return i(e,t.slice(n+1))}))},e}()),Ne=Ie.produce,Re=(Ie.produceWithPatches.bind(Ie),Ie.setAutoFreeze.bind(Ie),Ie.setUseProxies.bind(Ie),Ie.applyPatches.bind(Ie),Ie.createDraft.bind(Ie),Ie.finishDraft.bind(Ie),Ne);function je(e,t){return e===t}function Be(e,t,n){if(null===t||null===n||t.length!==n.length)return!1;for(var r=t.length,i=0;i<r;i++)if(!e(t[i],n[i]))return!1;return!0}function Me(e){var t=Array.isArray(e[0])?e[0]:e;if(!t.every((function(e){return"function"==typeof e}))){var n=t.map((function(e){return typeof e})).join(", ");throw new Error("Selector creators expect all input-selectors to be functions, instead received the following types: ["+n+"]")}return t}!function(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r]}((function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:je,n=null,r=null;return function(){return Be(t,n,arguments)||(r=e.apply(null,arguments)),n=arguments,r}}));function De(e){return function(t){var n=t.dispatch,r=t.getState;return function(t){return function(i){return"function"==typeof i?i(n,r,e):t(i)}}}}var ze=De();ze.withExtraArgument=De;var Fe=ze;function Le(){return(Le=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function Ue(e){return(Ue=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function We(e,t){return(We=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Ve(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}function $e(e,t,n){return($e=Ve()?Reflect.construct:function(e,t,n){var r=[null];r.push.apply(r,t);var i=new(Function.bind.apply(e,r));return n&&We(i,n.prototype),i}).apply(null,arguments)}function qe(e){var t="function"==typeof Map?new Map:void 0;return(qe=function(e){if(null===e||!function(e){return-1!==Function.toString.call(e).indexOf("[native code]")}(e))return e;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==t){if(t.has(e))return t.get(e);t.set(e,n)}function n(){return $e(e,arguments,Ue(this).constructor)}return n.prototype=Object.create(e.prototype,{constructor:{value:n,enumerable:!1,writable:!0,configurable:!0}}),We(n,e)})(e)}var He="undefined"!=typeof window&&window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__?window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__:function(){if(0!==arguments.length)return"object"==typeof arguments[0]?S:S.apply(null,arguments)};function Qe(e){if("object"!=typeof e||null===e)return!1;for(var t=e;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t}var Ke=function(e){var t,n;function r(){return e.apply(this,arguments)||this}n=e,(t=r).prototype=Object.create(n.prototype),t.prototype.constructor=t,t.__proto__=n;var i=r.prototype;return i.concat=function(){for(var t,n=arguments.length,i=new Array(n),o=0;o<n;o++)i[o]=arguments[o];return $e(r,(t=e.prototype.concat).call.apply(t,[this].concat(i)))},i.prepend=function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return 1===t.length&&Array.isArray(t[0])?$e(r,t[0].concat(this)):$e(r,t.concat(this))},r}(qe(Array));function Ye(){return function(e){return function(e){void 0===e&&(e={});var t=e,n=t.thunk,r=void 0===n||n,i=(t.immutableCheck,t.serializableCheck,new Ke);r&&(!function(e){return"boolean"==typeof e}(r)?i.push(Fe.withExtraArgument(r.extraArgument)):i.push(Fe));0;return i}(e)}}function Xe(e,t){function n(){if(t){var n=t.apply(void 0,arguments);if(!n)throw new Error("prepareAction did not return an object");return Le({type:e,payload:n.payload},"meta"in n&&{meta:n.meta},{},"error"in n&&{error:n.error})}return{type:e,payload:arguments.length<=0?void 0:arguments[0]}}return n.toString=function(){return""+e},n.type=e,n.match=function(t){return t.type===e},n}function Ge(e){var t,n={},r=[],i={addCase:function(e,t){var r="string"==typeof e?e:e.type;if(r in n)throw new Error("addCase cannot be called with two reducers for the same action type");return n[r]=t,i},addMatcher:function(e,t){return r.push({matcher:e,reducer:t}),i},addDefaultCase:function(e){return t=e,i}};return e(i),[n,r,t]}function Je(e){var t=e.name,n=e.initialState;if(!t)throw new Error("`name` is a required option for createSlice");var r=e.reducers||{},i=void 0===e.extraReducers?[]:"function"==typeof e.extraReducers?Ge(e.extraReducers):[e.extraReducers],o=i[0],a=void 0===o?{}:o,u=i[1],l=void 0===u?[]:u,c=i[2],s=void 0===c?void 0:c,f=Object.keys(r),d={},p={},m={};f.forEach((function(e){var n,i,o=r[e],a=t+"/"+e;"reducer"in o?(n=o.reducer,i=o.prepare):n=o,d[e]=n,p[a]=n,m[e]=i?Xe(a,i):Xe(a)}));var h=function(e,t,n,r){void 0===n&&(n=[]);var i="function"==typeof t?Ge(t):[t,n,r],o=i[0],a=i[1],u=i[2];return function(t,n){void 0===t&&(t=e);var r=[o[n.type]].concat(a.filter((function(e){return(0,e.matcher)(n)})).map((function(e){return e.reducer})));return 0===r.filter((function(e){return!!e})).length&&(r=[u]),r.reduce((function(e,t){if(t){if(M(e)){var r=t(e,n);return void 0===r?e:r}if(D(e))return Re(e,(function(e){return t(e,n)}));var i=t(e,n);if(void 0===i)throw Error("A case reducer on a non-draftable value must not return undefined");return i}return e}),t)}}(n,Le({},a,{},p),l,s);return{name:t,reducer:h,actions:m,caseReducers:d}}"undefined"!=typeof Symbol&&(Symbol.iterator||(Symbol.iterator=Symbol("Symbol.iterator"))),"undefined"!=typeof Symbol&&(Symbol.asyncIterator||(Symbol.asyncIterator=Symbol("Symbol.asyncIterator")));ve();var Ze=Je({name:"nav",initialState:{navSection:"Upload Video"},reducers:{setNavSection:function(e,t){e.navSection=t.payload.navSection}}}),et=Ze.actions.setNavSection,tt=Ze.reducer,nt=Je({name:"upload",initialState:{videoIsUploaded:!1,assetID:"",duration:0,videoIsPreloaded:!1,videoURL:"",imagesArePreloaded:!1,imageURLs:[]},reducers:{setVideoIsUploaded:function(e,t){e.videoIsUploaded=!0,e.assetID=t.payload.assetID},setVideoIsPreloaded:function(e,t){e.videoIsPreloaded=!0,e.videoURL=t.payload.videoURL},setImagesArePreloaded:function(e,t){e.imagesArePreloaded=!0,e.imageURLs=t.payload.imageURLs}}}),rt=nt.actions,it=rt.setVideoIsUploaded,ot=rt.setVideoIsPreloaded,at=rt.setImagesArePreloaded,ut=nt.reducer,lt=Je({name:"scrubber",initialState:{scrubberFramesMax:20,currentScrubberFrame:Math.floor(10),canvasWidth:0},reducers:{setScrubberCanvasWidth:function(e,t){var n=t.payload;e.canvasWidth=n>window.innerWidth?window.innerWidth:n},setCurrentScrubberFrame:function(e,t){e.currentScrubberFrame=t.payload}}}),ct=lt.actions,st=(ct.setScrubberCanvasWidth,ct.setCurrentScrubberFrame),ft=lt.reducer,dt={2:[{row:0,col:0},{row:0,col:1}],3:[{row:0,col:0},{row:0,col:1},{row:0,col:2}],4:[{row:0,col:0},{row:0,col:1},{row:1,col:0},{row:1,col:1}],6:[{row:0,col:0},{row:0,col:1},{row:0,col:2},{row:1,col:0},{row:1,col:1},{row:1,col:2}],9:[{row:0,col:0},{row:0,col:1},{row:0,col:2},{row:1,col:0},{row:1,col:1},{row:1,col:2},{row:2,col:0},{row:2,col:1},{row:2,col:2}]},pt=[2,3,4,6,9],mt=Je({name:"mosaic",initialState:{numTiles:void 0,canvasWidth:void 0,inPoints:void 0,copyVideoFromArea:void 0,drawToCanvasArea:void 0,tileAnimEvents:void 0},reducers:{setMosaicVideo:function(e,t){var n,r,i=t.payload,o=i.duration,a=i.width,u=i.height;o&&a&&u&&(e.inPoints=function(e){var t={};return pt.forEach((function(n){for(var r=(e-2)/n,i=[],o=0;o<n;o++)i.push((o+1)*r);t[n]=i})),t}(o),e.copyVideoFromArea={2:{x:(n=a)/4,y:0,width:n/2,height:r=u},3:{x:n/3,y:0,width:n/3,height:r},4:{x:0,y:0,width:n,height:r},6:{x:n/6,y:0,width:.66*n,height:r},9:{x:0,y:0,width:n,height:r}},e.tileAnimEvents={2:[[{time:500,action:"fadeIn"},{time:2e3,action:"fadeOut"},{time:5e3,action:"fadeIn"},{time:6500,action:"fadeOut"},{time:1e4,action:"fadeIn"},{time:11500,action:"fadeOut"},{time:12500,action:"fadeIn"},{time:14e3,action:"fadeOut"},{time:16e3,action:"wait"}],[{time:2500,action:"fadeIn"},{time:4e3,action:"fadeOut"},{time:5e3,action:"fadeIn"},{time:6500,action:"fadeOut"},{time:8e3,action:"fadeIn"},{time:9500,action:"fadeOut"},{time:12500,action:"fadeIn"},{time:14e3,action:"fadeOut"},{time:16e3,action:"wait"}]],3:[[{time:1500,action:"fadeIn"},{time:3e3,action:"fadeOut"},{time:5e3,action:"fadeIn"},{time:6500,action:"fadeOut"},{time:1e4,action:"fadeIn"},{time:11500,action:"fadeOut"},{time:12500,action:"fadeIn"},{time:14e3,action:"fadeOut"},{time:16e3,action:"wait"}],[{time:500,action:"fadeIn"},{time:2e3,action:"fadeOut"},{time:6e3,action:"fadeIn"},{time:7500,action:"fadeOut"},{time:9500,action:"fadeIn"},{time:11e3,action:"fadeOut"},{time:12500,action:"fadeIn"},{time:14e3,action:"fadeOut"},{time:16e3,action:"wait"}],[{time:2e3,action:"fadeIn"},{time:3500,action:"fadeOut"},{time:5500,action:"fadeIn"},{time:7e3,action:"fadeOut"},{time:8500,action:"fadeIn"},{time:1e4,action:"fadeOut"},{time:12500,action:"fadeIn"},{time:14e3,action:"fadeOut"},{time:16e3,action:"wait"}]],4:[[{time:500,action:"fadeIn"},{time:2e3,action:"fadeOut"},{time:4e3,action:"fadeIn"},{time:5500,action:"fadeOut"},{time:7500,action:"fadeIn"},{time:9e3,action:"fadeOut"},{time:12e3,action:"fadeIn"},{time:13500,action:"fadeOut"},{time:16e3,action:"wait"}],[{time:2e3,action:"fadeIn"},{time:3500,action:"fadeOut"},{time:6e3,action:"fadeIn"},{time:7500,action:"fadeOut"},{time:8e3,action:"fadeIn"},{time:9500,action:"fadeOut"},{time:12e3,action:"fadeIn"},{time:13500,action:"fadeOut"},{time:16e3,action:"wait"}],[{time:1500,action:"fadeIn"},{time:3e3,action:"fadeOut"},{time:4500,action:"fadeIn"},{time:6e3,action:"fadeOut"},{time:9500,action:"fadeIn"},{time:11e3,action:"fadeOut"},{time:12e3,action:"fadeIn"},{time:13500,action:"fadeOut"},{time:16e3,action:"wait"}],[{time:3e3,action:"fadeIn"},{time:4500,action:"fadeOut"},{time:5500,action:"fadeIn"},{time:7e3,action:"fadeOut"},{time:9e3,action:"fadeIn"},{time:10500,action:"fadeOut"},{time:12e3,action:"fadeIn"},{time:13500,action:"fadeOut"},{time:16e3,action:"wait"}]],6:[[{time:1e3,action:"fadeIn"},{time:2500,action:"fadeOut"},{time:8500,action:"fadeIn"},{time:1e4,action:"fadeOut"},{time:12e3,action:"fadeIn"},{time:13500,action:"fadeOut"},{time:16e3,action:"wait"}],[{time:500,action:"fadeIn"},{time:2e3,action:"fadeOut"},{time:7500,action:"fadeIn"},{time:9e3,action:"fadeOut"},{time:12e3,action:"fadeIn"},{time:13500,action:"fadeOut"},{time:16e3,action:"wait"}],[{time:3e3,action:"fadeIn"},{time:4500,action:"fadeOut"},{time:7e3,action:"fadeIn"},{time:8500,action:"fadeOut"},{time:12e3,action:"fadeIn"},{time:13500,action:"fadeOut"},{time:16e3,action:"wait"}],[{time:2e3,action:"fadeIn"},{time:3500,action:"fadeOut"},{time:6e3,action:"fadeIn"},{time:7500,action:"fadeOut"},{time:12e3,action:"fadeIn"},{time:13500,action:"fadeOut"},{time:16e3,action:"wait"}],[{time:5e3,action:"fadeIn"},{time:6500,action:"fadeOut"},{time:9500,action:"fadeIn"},{time:11e3,action:"fadeOut"},{time:12e3,action:"fadeIn"},{time:13500,action:"fadeOut"},{time:16e3,action:"wait"}],[{time:4e3,action:"fadeIn"},{time:5500,action:"fadeOut"},{time:8500,action:"fadeIn"},{time:1e4,action:"fadeOut"},{time:12e3,action:"fadeIn"},{time:13500,action:"fadeOut"},{time:16e3,action:"wait"}]],9:[[{time:250,action:"fadeIn"},{time:1750,action:"fadeOut"},{time:4250,action:"fadeIn"},{time:5750,action:"fadeOut"},{time:10500,action:"fadeIn"},{time:12e3,action:"fadeOut"},{time:16e3,action:"wait"}],[{time:1e3,action:"fadeIn"},{time:2500,action:"fadeOut"},{time:7250,action:"fadeIn"},{time:8750,action:"fadeOut"},{time:10750,action:"fadeIn"},{time:12250,action:"fadeOut"},{time:16e3,action:"wait"}],[{time:500,action:"fadeIn"},{time:2e3,action:"fadeOut"},{time:5e3,action:"fadeIn"},{time:6500,action:"fadeOut"},{time:10250,action:"fadeIn"},{time:11750,action:"fadeOut"},{time:16e3,action:"wait"}],[{time:1500,action:"fadeIn"},{time:3e3,action:"fadeOut"},{time:5500,action:"fadeIn"},{time:7e3,action:"fadeOut"},{time:11250,action:"fadeIn"},{time:12750,action:"fadeOut"},{time:16e3,action:"wait"}],[{time:1250,action:"fadeIn"},{time:2750,action:"fadeOut"},{time:7500,action:"fadeIn"},{time:9e3,action:"fadeOut"},{time:11500,action:"fadeIn"},{time:13e3,action:"fadeOut"},{time:16e3,action:"wait"}],[{time:2e3,action:"fadeIn"},{time:3500,action:"fadeOut"},{time:6250,action:"fadeIn"},{time:7750,action:"fadeOut"},{time:11725,action:"fadeIn"},{time:13250,action:"fadeOut"},{time:16e3,action:"wait"}],[{time:1750,action:"fadeIn"},{time:3250,action:"fadeOut"},{time:4750,action:"fadeIn"},{time:6250,action:"fadeOut"},{time:12e3,action:"fadeIn"},{time:13500,action:"fadeOut"},{time:16e3,action:"wait"}],[{time:2250,action:"fadeIn"},{time:3750,action:"fadeOut"},{time:8250,action:"fadeIn"},{time:9750,action:"fadeOut"},{time:12250,action:"fadeIn"},{time:13750,action:"fadeOut"},{time:16e3,action:"wait"}],[{time:2500,action:"fadeIn"},{time:4e3,action:"fadeOut"},{time:5e3,action:"fadeIn"},{time:6500,action:"fadeOut"},{time:12500,action:"fadeIn"},{time:14e3,action:"fadeOut"},{time:16e3,action:"wait"}]]},e.canvasWidth=480,e.drawToCanvasArea=function(e,t){var n={2:{width:e/2,height:t},3:{width:e/3,height:t},4:{width:e/2,height:t/2},6:{width:e/3,height:t/2},9:{width:e/3,height:t/3}},r={};return pt.forEach((function(e){r[e]=dt[e].map((function(t){var r=t.row;return{x:t.col*n[e].width,y:r*n[e].height,width:n[e].width,height:n[e].height}}))})),r}(e.canvasWidth,e.canvasWidth),e.numTiles=3)},setNumTiles:function(e,t){var n=t.payload;e.numTiles=n}}}),ht=mt.actions,vt=ht.setMosaicVideo,yt=ht.setNumTiles,bt=mt.reducer,gt=Je({name:"app",initialState:{isLoading:void 0,greeting:"Hello World!"},reducers:{setIsLoading:function(e,t){e.isLoading=t.payload},setGreeting:function(e,t){e.greeting=t.payload}}}),wt=gt.actions,xt=(wt.setIsLoading,wt.setGreeting,function(e){var t,n=Ye(),r=e||{},i=r.reducer,o=void 0===i?void 0:i,a=r.middleware,u=void 0===a?n():a,l=r.devTools,c=void 0===l||l,s=r.preloadedState,f=void 0===s?void 0:s,d=r.enhancers,p=void 0===d?void 0:d;if("function"==typeof o)t=o;else{if(!Qe(o))throw new Error('"reducer" is a required argument, and must be a function or an object of functions that can be passed to combineReducers');t=w(o)}var m=T.apply(void 0,"function"==typeof u?u(n):u),h=S;c&&(h=He(Le({trace:!1},"object"==typeof c&&c)));var v=[m];return Array.isArray(p)?v=[m].concat(p):"function"==typeof p&&(v=p(v)),b(t,f,h.apply(void 0,v))}({reducer:w({app:gt.reducer,nav:tt,upload:ut,scrubber:ft,mosaic:bt})})),Et="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto),kt=new Uint8Array(16);function St(){if(!Et)throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return Et(kt)}var Tt=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;for(var Ct=function(e){return"string"==typeof e&&Tt.test(e)},At=[],Ot=0;Ot<256;++Ot)At.push((Ot+256).toString(16).substr(1));var _t,Pt,It=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=(At[e[t+0]]+At[e[t+1]]+At[e[t+2]]+At[e[t+3]]+"-"+At[e[t+4]]+At[e[t+5]]+"-"+At[e[t+6]]+At[e[t+7]]+"-"+At[e[t+8]]+At[e[t+9]]+"-"+At[e[t+10]]+At[e[t+11]]+At[e[t+12]]+At[e[t+13]]+At[e[t+14]]+At[e[t+15]]).toLowerCase();if(!Ct(n))throw TypeError("Stringified UUID is invalid");return n},Nt=0,Rt=0;var jt=function(e,t,n){var r=t&&n||0,i=t||new Array(16),o=(e=e||{}).node||_t,a=void 0!==e.clockseq?e.clockseq:Pt;if(null==o||null==a){var u=e.random||(e.rng||St)();null==o&&(o=_t=[1|u[0],u[1],u[2],u[3],u[4],u[5]]),null==a&&(a=Pt=16383&(u[6]<<8|u[7]))}var l=void 0!==e.msecs?e.msecs:Date.now(),c=void 0!==e.nsecs?e.nsecs:Rt+1,s=l-Nt+(c-Rt)/1e4;if(s<0&&void 0===e.clockseq&&(a=a+1&16383),(s<0||l>Nt)&&void 0===e.nsecs&&(c=0),c>=1e4)throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");Nt=l,Rt=c,Pt=a;var f=(1e4*(268435455&(l+=122192928e5))+c)%4294967296;i[r++]=f>>>24&255,i[r++]=f>>>16&255,i[r++]=f>>>8&255,i[r++]=255&f;var d=l/4294967296*1e4&268435455;i[r++]=d>>>8&255,i[r++]=255&d,i[r++]=d>>>24&15|16,i[r++]=d>>>16&255,i[r++]=a>>>8|128,i[r++]=255&a;for(var p=0;p<6;++p)i[r+p]=o[p];return t||It(i)},Bt=function(){var e=P(),t=j((function(e){return e.nav})).navSection;return r.createElement("div",{style:{display:"flex",width:"480px"}},["Upload Video","Edit Mosaic","Render Mosaic"].map((function(n){return r.createElement("div",{key:jt()},n!==t?r.createElement("div",{onClick:function(){e(et({navSection:n}))},style:{backgroundColor:"#009900",width:"156px",height:"80px",margin:"2px",color:"#fff"}},n):r.createElement("div",{style:{backgroundColor:"#00ff00",width:"156px",height:"80px",margin:"2px"}},n))})))},Mt=function(){var e=P(),t=j((function(e){return e.upload})),n=t.videoIsUploaded,i=t.videoIsPreloaded,o=t.imagesArePreloaded,a=t.assetID;return Object(r.useEffect)((function(){if(n&&!i){var t="http://0.0.0.0:3001/".concat(a,"/resized.mov");(r=t,new Promise((function(e,t){var n=new XMLHttpRequest;n.open("GET",r,!0),n.responseType="blob",n.onload=function(){if(200===this.status){var t=this.response,n=URL.createObjectURL(t);e(n)}},n.onerror=function(){t("req ERROR")},n.send()}))).then((function(t){return function(t){e(ot({videoIsPreloaded:!0,videoURL:t}))}(t)})).catch((function(e){return console.log("ERROR: ".concat(e))}))}var r}),[i,n,a]),Object(r.useEffect)((function(){var t,r,i,u,l,c,s;n&&!o&&(t={startIdx:1,endIdx:20,nameFormat:"img .jpg",zeroPadding:3,directoryPath:"http://0.0.0.0:3001/".concat(a)},r=t.startIdx,i=t.endIdx,u=t.nameFormat,l=t.zeroPadding,c=t.directoryPath,s=Array(i-r+1).fill(r).map((function(e,t){var n=e+t+"";return u.replace(" ",n.padStart(l,"0"))})).map((function(e){return new Promise((function(t,n){var r=new XMLHttpRequest;r.open("GET","".concat(c,"/").concat(e),!0),r.responseType="blob",r.onload=function(){if(200===this.status){var e=this.response,n=URL.createObjectURL(e);t(n)}},r.onerror=function(){n("req ERROR")},r.send()}))})),Promise.all(s)).then((function(t){return function(t){e(at({imagesArePreloaded:!0,imageURLs:t}))}(t)})).catch((function(e){return console.log("ERROR: ".concat(e))}))}),[o,n,a]),r.createElement("div",null,!n&&r.createElement("div",{style:{marginTop:"300px"}},r.createElement("label",null,"UPLOAD VIDEO"),r.createElement("input",{id:"myFile",type:"file",onChange:function(t){var n,r,i;(n=t.target.files[0],r="http://0.0.0.0:3001/file/upload",i=new FormData,i.append("myFile",n),new Promise((function(e,t){fetch(r,{method:"POST",body:i}).then((function(e){return e.json()})).then((function(t){e(t.assetID)})).catch((function(e){return t(e)}))}))).then((function(t){return function(t){e(it({videoIsUploaded:!0,assetID:t}))}(t)})).catch((function(e){return console.log(e)}))}})))},Dt=n(31),zt=n(49),Ft=function(){var e=j((function(e){return e.upload})).assetID;return r.createElement("div",null,r.createElement("div",{style:{marginTop:"300px"}},r.createElement("label",null,"RENDER MOSAIC"),r.createElement("button",{type:"button",onClick:function(){return function(e){Dt({url:"http://0.0.0.0:3001/render/mosaic/?assetID=".concat(e),method:"GET",responseType:"blob"}).then((function(e){zt(e.data,"mosaic_render.mov")}))}(e)}},"Render Mosaic")))},Lt=(n(4),function(e){var t=e.width,n=e.height,i=e.imageArr,o=j((function(e){return e.scrubber})).currentScrubberFrame,a=Object(r.useRef)(null);return Object(r.useEffect)((function(){null!==a.current&&(a.current.src=i[o])}),[o]),r.createElement("div",{className:"scrubberFrames-container"},r.createElement("img",{ref:a,width:t,height:n}))}),Ut=function(){var e=j((function(e){return e.upload})).imageURLs;return r.createElement("div",{className:"scrubber-container"},r.createElement(Lt,{width:480,height:480,imageArr:e}))},Wt=function(){var e=P(),t=j((function(e){return e.scrubber})),n=t.currentScrubberFrame,i=t.scrubberFramesMax;return r.createElement("div",{style:{marginTop:"8px"}},r.createElement("input",{type:"range",min:"0",max:i-1,step:"1",defaultValue:n,className:"scrubberSlider",onChange:function(t){e(st(parseInt(t.target.value)))},"data-testid":"backgroundSelectorInput"}))},Vt=function(e){var t=e.onClickCallback,n=e.stateValue,r=e.isEnabled,o=e.imagePath,a=e.className,u=e.altText;return i.a.createElement("div",null,r?i.a.createElement("img",{src:o,className:a.default,onClick:function(){return t(n)},alt:u}):i.a.createElement("img",{src:o,className:a.hilite,alt:u}))},$t=(n(18),function(){var e=P(),t=j((function(e){return e.mosaic})).numTiles,n=function(t){e(yt(t))};return r.createElement("div",{className:"mosaicSelector-container"},pt.map((function(e){return{stateValue:e,imagePath:"images/0".concat(e,"_mosaic_selector_64x64_on.png"),className:{default:"mosaicSelector-button-default",hilite:"mosaicSelector-button-hilite"},altText:"Click for ".concat(e,"-tile video mosaic")}})).map((function(e){return r.createElement(Vt,{onClickCallback:n,stateValue:e.stateValue,isEnabled:e.stateValue!==t,imagePath:e.imagePath,className:e.className,altText:e.altText,key:jt()})})))});function qt(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,i=!1,o=void 0;try{for(var a,u=e[Symbol.iterator]();!(r=(a=u.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){i=!0,o=e}finally{try{r||null==u.return||u.return()}finally{if(i)throw o}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return Ht(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return Ht(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Ht(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var Qt=function(){var e=j((function(e){return e.mosaic})),t=e.numTiles,n=e.canvasWidth,i=e.inPoints,o=e.copyVideoFromArea,a=e.drawToCanvasArea,u=e.tileAnimEvents,l=j((function(e){return e.upload})).videoURL,c=P(),s=qt(Object(r.useState)(!1),2),f=s[0],d=s[1];Object(r.useEffect)((function(){c(vt({duration:8,width:480,height:480})),d(!0)}),[8]);var p=qt(Object(r.useState)([]),2),m=p[0],h=p[1],v=Object(r.useRef)();Object(r.useEffect)((function(){if(console.log("top of UseEffect. numTiles: ".concat(t)),null!==v.current&&f){for(var e=[],r=0;r<t;r++){var c=Object.create(Kt);c.setVideoSrc(l),c.setContext(v.current.getContext("2d")),c.setAttributes(i[t][r],o[t],a[t][r],u[t][r]),e.push(c)}h(e)}return function(){var e;cancelAnimationFrame(y.current),null===(e=v.current.getContext("2d"))||void 0===e||e.clearRect(0,0,n,n)}}),[t,f]),Object(r.useEffect)((function(){var e;m.forEach((function(e){return e.initAnimation()})),e=performance.now(),y.current=requestAnimationFrame((function t(n){var r=n-e;r>15e3&&(e=performance.now(),r=0,m.forEach((function(e){return e.resetAnimation()}))),m.forEach((function(e){r>e.nextEventTime&&e.updateCurrentEventAction(),e.currentEventAction()})),y.current=requestAnimationFrame(t)}))}),[m]);var y=Object(r.useRef)(0);return r.createElement("div",{style:{position:"relative",top:"-484px"}},r.createElement("canvas",{ref:v,width:n,height:n}))},Kt={_video:void 0,_context:void 0,_inPoint:void 0,_copyVideoFromArea:void 0,_drawToCanvasArea:void 0,_tileAnimEvents:void 0,_fadeStartTime:void 0,_fadeDuration:500,_fadeOpacity:void 0,nextEventTime:void 0,_nextEventIndex:void 0,_maxEventIndex:void 0,setVideoSrc:function(e){this._video=document.createElement("video"),this._video.src=e,this._video.autoplay=!0,this._video.loop=!0,this._video.muted=!0,this._video.setAttribute("webkit-playsinline","webkit-playsinline"),this._video.setAttribute("playsinline","playsinline")},setContext:function(e){this._context=e},setAttributes:function(e,t,n,r){this._inPoint=e,this._copyVideoFromArea=t,this._drawToCanvasArea=n,this._tileAnimEvents=r,this._maxEventIndex=this._tileAnimEvents.length},initAnimation:function(){this.currentEventAction=this._wait,this._nextEventIndex=0,this.nextEventTime=this._tileAnimEvents[this._nextEventIndex].time,this._video.currentTime=this._inPoint},resetAnimation:function(){this._nextEventIndex=0,this.nextEventTime=this._tileAnimEvents[this._nextEventIndex].time},clearAnimation:function(){this.currentEventAction=this._wait,this._video.pause(),this._video.removeAttribute("src"),this._video.load()},currentEventAction:function(){},updateCurrentEventAction:function(){var e=this._tileAnimEvents[this._nextEventIndex].action;switch(this._nextEventIndex=(this._nextEventIndex+1)%this._maxEventIndex,this.nextEventTime=this._tileAnimEvents[this._nextEventIndex].time,e){case"fadeIn":this._initFadeIn();break;case"fadeOut":this._initFadeOut();break;default:console.log("ERROR: no case for ".concat(e))}},_initFadeIn:function(){this._video.currentTime=this._inPoint,this._fadeStartTime=Date.now(),this._video.play(),this.currentEventAction=this._fadeIn},_fadeIn:function(){var e=Date.now()-this._fadeStartTime;if(this._fadeOpacity=e/this._fadeDuration,this._fadeOpacity>1)return this._fadeOpacity=1,void(this.currentEventAction=this._drawImage);this._drawImage()},_initFadeOut:function(){this._fadeStartTime=Date.now(),this.currentEventAction=this._fadeOut},_fadeOut:function(){var e=Date.now()-this._fadeStartTime;if(this._fadeOpacity=1-e/this._fadeDuration,this._fadeOpacity<0)return this._fadeOpacity=0,this._drawImage(),this._video.pause(),this._video.currentTime=this._inPoint,void(this.currentEventAction=this._wait);this._drawImage()},_drawImage:function(){0!==this._drawToCanvasArea.width&&(this._context.clearRect(this._drawToCanvasArea.x,this._drawToCanvasArea.y,this._drawToCanvasArea.width,this._drawToCanvasArea.height),this._context.globalAlpha=this._fadeOpacity,this._context.drawImage(this._video,this._copyVideoFromArea.x,this._copyVideoFromArea.y,this._copyVideoFromArea.width,this._copyVideoFromArea.height,this._drawToCanvasArea.x,this._drawToCanvasArea.y,this._drawToCanvasArea.width,this._drawToCanvasArea.height))},_wait:function(){}},Yt=(n(52),function(){var e=j((function(e){return e.nav})).navSection;return r.createElement("div",{style:{height:"700px",width:"480px",borderStyle:"dashed",borderColor:"aquamarine",borderWidth:"2px"}},r.createElement("div",{style:{height:"600px",width:"100%",borderStyle:"dashed",borderColor:"red",borderWidth:"2px"}},"Upload Video"===e&&r.createElement("div",{style:{height:"600px",width:"100%",borderStyle:"dashed",borderColor:"green",borderWidth:"2px"}},r.createElement(Mt,null)),"Edit Mosaic"===e&&r.createElement("div",null,r.createElement("div",{style:{height:"480px",width:"100%",borderStyle:"dashed",borderColor:"yellow",borderWidth:"2px"}},r.createElement(Ut,null),r.createElement(Qt,null)),r.createElement("div",{style:{height:"50px",width:"100%",borderStyle:"dashed",borderColor:"brown",borderWidth:"2px"}},r.createElement(Wt,null)),r.createElement("div",{style:{height:"80px",width:"100%",borderStyle:"dashed",borderColor:"pink",borderWidth:"2px"}},r.createElement($t,null))),"Render Mosaic"===e&&r.createElement("div",{style:{height:"600px",width:"100%",borderStyle:"dashed",borderColor:"green",borderWidth:"2px"}},r.createElement(Ft,null))),r.createElement("div",{style:{height:"80px",width:"100%",borderStyle:"dashed",borderColor:"purple",borderWidth:"2px"}},r.createElement(Bt,null)))});a.a.render(r.createElement(d,{store:xt},r.createElement(Yt,null)),document.getElementById("root"))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,